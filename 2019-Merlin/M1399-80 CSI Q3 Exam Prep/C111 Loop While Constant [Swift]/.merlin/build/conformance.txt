(source_file "main.swift"
  (top_level_code_decl range=[main.swift:1:1 - line:1:9]
    (brace_stmt implicit range=[main.swift:1:1 - line:1:9]
      (pattern_binding_decl range=[main.swift:1:1 - line:1:9]
        (pattern_named type='Int' 'x')
        (call_expr implicit type='Int' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] nothrow
            (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] names=_builtinIntegerLiteral
            (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] value=0))))
))
  (var_decl range=[main.swift:1:5 - line:1:5] "x" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:2:1 - line:6:1]
    (brace_stmt range=[main.swift:2:1 - line:6:1]
      (while_stmt range=[main.swift:2:1 - line:6:1]
        (binary_expr type='Bool' location=main.swift:2:9 range=[main.swift:2:7 - line:2:12] nothrow
          (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:2:9 range=[main.swift:2:9 - line:2:9] nothrow
            (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:2:9 range=[main.swift:2:9 - line:2:9] decl=Swift.(file).BinaryInteger extension.!= [with (substitution_map generic_signature=<Self where Self : BinaryInteger> (substitution Self -> Int))] function_ref=unapplied)
            (type_expr implicit type='Int.Type' location=main.swift:2:9 range=[main.swift:2:9 - line:2:9] typerepr='Int'))
          (tuple_expr implicit type='(Int, Int)' location=main.swift:2:7 range=[main.swift:2:7 - line:2:12]
            (load_expr implicit type='Int' location=main.swift:2:7 range=[main.swift:2:7 - line:2:7]
              (declref_expr type='@lvalue Int' location=main.swift:2:7 range=[main.swift:2:7 - line:2:7] decl=main.(file).x@main.swift:1:5 function_ref=unapplied))
            (call_expr implicit type='Int' location=main.swift:2:12 range=[main.swift:2:12 - line:2:12] nothrow arg_labels=_builtinIntegerLiteral:
              (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:2:12 range=[main.swift:2:12 - line:2:12] nothrow
                (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:2:12 range=[main.swift:2:12 - line:2:12] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                (type_expr implicit type='Int.Type' location=main.swift:2:12 range=[main.swift:2:12 - line:2:12] typerepr='Int'))
              (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:2:12 range=[main.swift:2:12 - line:2:12] names=_builtinIntegerLiteral
                (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:2:12 range=[main.swift:2:12 - line:2:12] value=5)))))
        (brace_stmt range=[main.swift:2:14 - line:6:1]
          (call_expr type='()' location=main.swift:3:5 range=[main.swift:3:5 - line:3:26] nothrow arg_labels=_:
            (declref_expr type='(Any..., String, String) -> ()' location=main.swift:3:5 range=[main.swift:3:5 - line:3:5] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:3:11 range=[main.swift:3:10 - line:3:26] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
              (paren_expr type='(Any)' location=main.swift:3:11 range=[main.swift:3:10 - line:3:26]
                (erasure_expr implicit type='Any' location=main.swift:3:11 range=[main.swift:3:11 - line:3:11]
                  (string_literal_expr type='String' location=main.swift:3:11 range=[main.swift:3:11 - line:3:11] encoding=utf8 value="Hello, World!" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))
          (binary_expr type='()' location=main.swift:4:7 range=[main.swift:4:5 - line:4:10] nothrow
            (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:4:7 range=[main.swift:4:7 - line:4:7] nothrow
              (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:4:7 range=[main.swift:4:7 - line:4:7] decl=Swift.(file).Int.+= function_ref=unapplied)
              (type_expr implicit type='Int.Type' location=main.swift:4:7 range=[main.swift:4:7 - line:4:7] typerepr='Int'))
            (tuple_expr implicit type='(inout Int, Int)' location=main.swift:4:5 range=[main.swift:4:5 - line:4:10]
              (inout_expr implicit type='inout Int' location=main.swift:4:5 range=[main.swift:4:5 - line:4:5]
                (declref_expr type='@lvalue Int' location=main.swift:4:5 range=[main.swift:4:5 - line:4:5] decl=main.(file).x@main.swift:1:5 function_ref=unapplied))
              (call_expr implicit type='Int' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] nothrow arg_labels=_builtinIntegerLiteral:
                (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] nothrow
                  (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                  (type_expr implicit type='Int.Type' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] typerepr='Int'))
                (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] names=_builtinIntegerLiteral
                  (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] value=1))))))))))