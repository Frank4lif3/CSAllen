(source_file "main.swift"
  (top_level_code_decl range=[main.swift:3:1 - line:3:14]
    (brace_stmt implicit range=[main.swift:3:1 - line:3:14]
      (pattern_binding_decl range=[main.swift:3:1 - line:3:14]
        (pattern_named type='String' 'string')
        (string_literal_expr type='String' location=main.swift:3:14 range=[main.swift:3:14 - line:3:14] encoding=utf8 value="yXy134yZe1" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
))
  (var_decl range=[main.swift:3:5 - line:3:5] "string" type='String' interface type='String' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:4:1 - line:4:9]
    (brace_stmt implicit range=[main.swift:4:1 - line:4:9]
      (pattern_binding_decl range=[main.swift:4:1 - line:4:9]
        (pattern_named type='Int' 'm')
        (call_expr implicit type='Int' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] nothrow
            (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] names=_builtinIntegerLiteral
            (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] value=3))))
))
  (var_decl range=[main.swift:4:5 - line:4:5] "m" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:5:1 - line:5:12]
    (brace_stmt implicit range=[main.swift:5:1 - line:5:12]
      (pattern_binding_decl range=[main.swift:5:1 - line:5:12]
        (pattern_named type='Int' 'base')
        (call_expr implicit type='Int' location=main.swift:5:12 range=[main.swift:5:12 - line:5:12] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:5:12 range=[main.swift:5:12 - line:5:12] nothrow
            (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:5:12 range=[main.swift:5:12 - line:5:12] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=main.swift:5:12 range=[main.swift:5:12 - line:5:12] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:5:12 range=[main.swift:5:12 - line:5:12] names=_builtinIntegerLiteral
            (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:5:12 range=[main.swift:5:12 - line:5:12] value=16))))
))
  (var_decl range=[main.swift:5:5 - line:5:5] "base" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:9:1 - line:9:13]
    (brace_stmt range=[main.swift:9:1 - line:9:13]
      (call_expr type='()' location=main.swift:9:1 range=[main.swift:9:1 - line:9:13] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=main.swift:9:1 range=[main.swift:9:1 - line:9:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:9:7 range=[main.swift:9:6 - line:9:13] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='(Any)' location=main.swift:9:7 range=[main.swift:9:6 - line:9:13]
            (erasure_expr implicit type='Any' location=main.swift:9:7 range=[main.swift:9:7 - line:9:7]
              (declref_expr type='String' location=main.swift:9:7 range=[main.swift:9:7 - line:9:7] decl=main.(file).string@main.swift:3:5 function_ref=unapplied)))))))
  (func_decl range=[main.swift:10:1 - line:49:1] "digit(character:)" interface type='(Character) -> Int?' access=internal
    (parameter_list
      (parameter "character" apiName=character interface type='Character') range=[main.swift:10:11 - line:10:31])
    (result
)
    (brace_stmt range=[main.swift:10:41 - line:49:1]
      (pattern_binding_decl range=[main.swift:11:5 - line:11:21]
        (pattern_typed type='Int?'
          (pattern_named type='Int?' 'number')
)
        (dot_syntax_call_expr implicit type='Int?' nothrow
          (declref_expr implicit type='(Int?.Type) -> Int?' decl=Swift.(file).Optional.none [with (substitution_map generic_signature=<Wrapped> (substitution Wrapped -> Int))] function_ref=unapplied)
          (type_expr implicit type='Int?.Type' typerepr='<<NULL>>')))

      (var_decl range=[main.swift:11:9 - line:11:9] "number" type='Int?' interface type='Int?' access=private readImpl=stored writeImpl=stored readWriteImpl=stored)

      (switch_stmt range=[main.swift:12:5 - line:47:5]
        (declref_expr type='Character' location=main.swift:12:12 range=[main.swift:12:12 - line:12:12] decl=main.(file).digit(character:).character@main.swift:10:12 function_ref=unapplied)
        (case_stmt range=[main.swift:13:5 - line:14:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:13:10 range=[main.swift:13:10 - line:13:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:13:10 range=[main.swift:13:10 - line:13:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:13:10 range=[main.swift:13:10 - line:13:10]
                (string_literal_expr type='Character' location=main.swift:13:10 range=[main.swift:13:10 - line:13:10] encoding=utf8 value="0" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:13:10 range=[main.swift:13:10 - line:13:10] decl=main.(file).digit(character:).$match@main.swift:13:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:14:9 - line:14:18]
            (assign_expr type='()' location=main.swift:14:16 range=[main.swift:14:9 - line:14:18]
              (declref_expr type='@lvalue Int?' location=main.swift:14:9 range=[main.swift:14:9 - line:14:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18]
                (call_expr implicit type='Int' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:14:18 range=[main.swift:14:18 - line:14:18] value=0)))))))
        (case_stmt range=[main.swift:15:5 - line:16:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:15:10 range=[main.swift:15:10 - line:15:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:15:10 range=[main.swift:15:10 - line:15:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:15:10 range=[main.swift:15:10 - line:15:10]
                (string_literal_expr type='Character' location=main.swift:15:10 range=[main.swift:15:10 - line:15:10] encoding=utf8 value="1" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:15:10 range=[main.swift:15:10 - line:15:10] decl=main.(file).digit(character:).$match@main.swift:15:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:16:9 - line:16:18]
            (assign_expr type='()' location=main.swift:16:16 range=[main.swift:16:9 - line:16:18]
              (declref_expr type='@lvalue Int?' location=main.swift:16:9 range=[main.swift:16:9 - line:16:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18]
                (call_expr implicit type='Int' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:16:18 range=[main.swift:16:18 - line:16:18] value=1)))))))
        (case_stmt range=[main.swift:17:5 - line:18:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:17:10 range=[main.swift:17:10 - line:17:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:17:10 range=[main.swift:17:10 - line:17:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:17:10 range=[main.swift:17:10 - line:17:10]
                (string_literal_expr type='Character' location=main.swift:17:10 range=[main.swift:17:10 - line:17:10] encoding=utf8 value="2" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:17:10 range=[main.swift:17:10 - line:17:10] decl=main.(file).digit(character:).$match@main.swift:17:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:18:9 - line:18:18]
            (assign_expr type='()' location=main.swift:18:16 range=[main.swift:18:9 - line:18:18]
              (declref_expr type='@lvalue Int?' location=main.swift:18:9 range=[main.swift:18:9 - line:18:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18]
                (call_expr implicit type='Int' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:18:18 range=[main.swift:18:18 - line:18:18] value=2)))))))
        (case_stmt range=[main.swift:19:5 - line:20:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:19:10 range=[main.swift:19:10 - line:19:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:19:10 range=[main.swift:19:10 - line:19:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:19:10 range=[main.swift:19:10 - line:19:10]
                (string_literal_expr type='Character' location=main.swift:19:10 range=[main.swift:19:10 - line:19:10] encoding=utf8 value="3" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:19:10 range=[main.swift:19:10 - line:19:10] decl=main.(file).digit(character:).$match@main.swift:19:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:20:9 - line:20:18]
            (assign_expr type='()' location=main.swift:20:16 range=[main.swift:20:9 - line:20:18]
              (declref_expr type='@lvalue Int?' location=main.swift:20:9 range=[main.swift:20:9 - line:20:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18]
                (call_expr implicit type='Int' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:20:18 range=[main.swift:20:18 - line:20:18] value=3)))))))
        (case_stmt range=[main.swift:21:5 - line:22:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:21:10 range=[main.swift:21:10 - line:21:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:21:10 range=[main.swift:21:10 - line:21:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:21:10 range=[main.swift:21:10 - line:21:10]
                (string_literal_expr type='Character' location=main.swift:21:10 range=[main.swift:21:10 - line:21:10] encoding=utf8 value="4" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:21:10 range=[main.swift:21:10 - line:21:10] decl=main.(file).digit(character:).$match@main.swift:21:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:22:9 - line:22:18]
            (assign_expr type='()' location=main.swift:22:16 range=[main.swift:22:9 - line:22:18]
              (declref_expr type='@lvalue Int?' location=main.swift:22:9 range=[main.swift:22:9 - line:22:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18]
                (call_expr implicit type='Int' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:22:18 range=[main.swift:22:18 - line:22:18] value=4)))))))
        (case_stmt range=[main.swift:23:5 - line:24:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:23:10 range=[main.swift:23:10 - line:23:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:23:10 range=[main.swift:23:10 - line:23:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:23:10 range=[main.swift:23:10 - line:23:10]
                (string_literal_expr type='Character' location=main.swift:23:10 range=[main.swift:23:10 - line:23:10] encoding=utf8 value="5" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:23:10 range=[main.swift:23:10 - line:23:10] decl=main.(file).digit(character:).$match@main.swift:23:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:24:9 - line:24:18]
            (assign_expr type='()' location=main.swift:24:16 range=[main.swift:24:9 - line:24:18]
              (declref_expr type='@lvalue Int?' location=main.swift:24:9 range=[main.swift:24:9 - line:24:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18]
                (call_expr implicit type='Int' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:24:18 range=[main.swift:24:18 - line:24:18] value=5)))))))
        (case_stmt range=[main.swift:25:5 - line:26:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:25:10 range=[main.swift:25:10 - line:25:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:25:10 range=[main.swift:25:10 - line:25:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:25:10 range=[main.swift:25:10 - line:25:10]
                (string_literal_expr type='Character' location=main.swift:25:10 range=[main.swift:25:10 - line:25:10] encoding=utf8 value="6" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:25:10 range=[main.swift:25:10 - line:25:10] decl=main.(file).digit(character:).$match@main.swift:25:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:26:9 - line:26:18]
            (assign_expr type='()' location=main.swift:26:16 range=[main.swift:26:9 - line:26:18]
              (declref_expr type='@lvalue Int?' location=main.swift:26:9 range=[main.swift:26:9 - line:26:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18]
                (call_expr implicit type='Int' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:26:18 range=[main.swift:26:18 - line:26:18] value=6)))))))
        (case_stmt range=[main.swift:27:5 - line:28:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:27:10 range=[main.swift:27:10 - line:27:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:27:10 range=[main.swift:27:10 - line:27:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:27:10 range=[main.swift:27:10 - line:27:10]
                (string_literal_expr type='Character' location=main.swift:27:10 range=[main.swift:27:10 - line:27:10] encoding=utf8 value="7" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:27:10 range=[main.swift:27:10 - line:27:10] decl=main.(file).digit(character:).$match@main.swift:27:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:28:9 - line:28:18]
            (assign_expr type='()' location=main.swift:28:16 range=[main.swift:28:9 - line:28:18]
              (declref_expr type='@lvalue Int?' location=main.swift:28:9 range=[main.swift:28:9 - line:28:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18]
                (call_expr implicit type='Int' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] value=7)))))))
        (case_stmt range=[main.swift:29:5 - line:30:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:29:10 range=[main.swift:29:10 - line:29:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:29:10 range=[main.swift:29:10 - line:29:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:29:10 range=[main.swift:29:10 - line:29:10]
                (string_literal_expr type='Character' location=main.swift:29:10 range=[main.swift:29:10 - line:29:10] encoding=utf8 value="8" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:29:10 range=[main.swift:29:10 - line:29:10] decl=main.(file).digit(character:).$match@main.swift:29:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:30:9 - line:30:18]
            (assign_expr type='()' location=main.swift:30:16 range=[main.swift:30:9 - line:30:18]
              (declref_expr type='@lvalue Int?' location=main.swift:30:9 range=[main.swift:30:9 - line:30:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18]
                (call_expr implicit type='Int' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] value=8)))))))
        (case_stmt range=[main.swift:31:5 - line:32:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:31:10 range=[main.swift:31:10 - line:31:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:31:10 range=[main.swift:31:10 - line:31:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:31:10 range=[main.swift:31:10 - line:31:10]
                (string_literal_expr type='Character' location=main.swift:31:10 range=[main.swift:31:10 - line:31:10] encoding=utf8 value="9" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:31:10 range=[main.swift:31:10 - line:31:10] decl=main.(file).digit(character:).$match@main.swift:31:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:32:9 - line:32:18]
            (assign_expr type='()' location=main.swift:32:16 range=[main.swift:32:9 - line:32:18]
              (declref_expr type='@lvalue Int?' location=main.swift:32:9 range=[main.swift:32:9 - line:32:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18]
                (call_expr implicit type='Int' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:32:18 range=[main.swift:32:18 - line:32:18] value=9)))))))
        (case_stmt range=[main.swift:33:5 - line:34:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:33:10 range=[main.swift:33:10 - line:33:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:33:10 range=[main.swift:33:10 - line:33:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:33:10 range=[main.swift:33:10 - line:33:10]
                (string_literal_expr type='Character' location=main.swift:33:10 range=[main.swift:33:10 - line:33:10] encoding=utf8 value="a" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:33:10 range=[main.swift:33:10 - line:33:10] decl=main.(file).digit(character:).$match@main.swift:33:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:34:9 - line:34:18]
            (assign_expr type='()' location=main.swift:34:16 range=[main.swift:34:9 - line:34:18]
              (declref_expr type='@lvalue Int?' location=main.swift:34:9 range=[main.swift:34:9 - line:34:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18]
                (call_expr implicit type='Int' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:34:18 range=[main.swift:34:18 - line:34:18] value=10)))))))
        (case_stmt range=[main.swift:35:5 - line:36:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:35:10 range=[main.swift:35:10 - line:35:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:35:10 range=[main.swift:35:10 - line:35:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:35:10 range=[main.swift:35:10 - line:35:10]
                (string_literal_expr type='Character' location=main.swift:35:10 range=[main.swift:35:10 - line:35:10] encoding=utf8 value="b" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:35:10 range=[main.swift:35:10 - line:35:10] decl=main.(file).digit(character:).$match@main.swift:35:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:36:9 - line:36:18]
            (assign_expr type='()' location=main.swift:36:16 range=[main.swift:36:9 - line:36:18]
              (declref_expr type='@lvalue Int?' location=main.swift:36:9 range=[main.swift:36:9 - line:36:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18]
                (call_expr implicit type='Int' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:36:18 range=[main.swift:36:18 - line:36:18] value=11)))))))
        (case_stmt range=[main.swift:37:5 - line:38:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10]
                (string_literal_expr type='Character' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] encoding=utf8 value="c" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] decl=main.(file).digit(character:).$match@main.swift:37:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:38:9 - line:38:18]
            (assign_expr type='()' location=main.swift:38:16 range=[main.swift:38:9 - line:38:18]
              (declref_expr type='@lvalue Int?' location=main.swift:38:9 range=[main.swift:38:9 - line:38:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18]
                (call_expr implicit type='Int' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:38:18 range=[main.swift:38:18 - line:38:18] value=12)))))))
        (case_stmt range=[main.swift:39:5 - line:40:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:39:10 range=[main.swift:39:10 - line:39:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:39:10 range=[main.swift:39:10 - line:39:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:39:10 range=[main.swift:39:10 - line:39:10]
                (string_literal_expr type='Character' location=main.swift:39:10 range=[main.swift:39:10 - line:39:10] encoding=utf8 value="d" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:39:10 range=[main.swift:39:10 - line:39:10] decl=main.(file).digit(character:).$match@main.swift:39:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:40:9 - line:40:18]
            (assign_expr type='()' location=main.swift:40:16 range=[main.swift:40:9 - line:40:18]
              (declref_expr type='@lvalue Int?' location=main.swift:40:9 range=[main.swift:40:9 - line:40:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18]
                (call_expr implicit type='Int' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:40:18 range=[main.swift:40:18 - line:40:18] value=13)))))))
        (case_stmt range=[main.swift:41:5 - line:42:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:41:10 range=[main.swift:41:10 - line:41:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:41:10 range=[main.swift:41:10 - line:41:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:41:10 range=[main.swift:41:10 - line:41:10]
                (string_literal_expr type='Character' location=main.swift:41:10 range=[main.swift:41:10 - line:41:10] encoding=utf8 value="e" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:41:10 range=[main.swift:41:10 - line:41:10] decl=main.(file).digit(character:).$match@main.swift:41:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:42:9 - line:42:18]
            (assign_expr type='()' location=main.swift:42:16 range=[main.swift:42:9 - line:42:18]
              (declref_expr type='@lvalue Int?' location=main.swift:42:9 range=[main.swift:42:9 - line:42:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18]
                (call_expr implicit type='Int' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:42:18 range=[main.swift:42:18 - line:42:18] value=14)))))))
        (case_stmt range=[main.swift:43:5 - line:44:18]
          (case_label_item
          (pattern_expr type='Character'
            (binary_expr implicit type='Bool' location=main.swift:43:10 range=[main.swift:43:10 - line:43:10] nothrow
              (declref_expr implicit type='(Character, Character) -> Bool' location=main.swift:43:10 range=[main.swift:43:10 - line:43:10] decl=Swift.(file).~= [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> Character))] function_ref=compound)
              (tuple_expr implicit type='(Character, Character)' location=main.swift:43:10 range=[main.swift:43:10 - line:43:10]
                (string_literal_expr type='Character' location=main.swift:43:10 range=[main.swift:43:10 - line:43:10] encoding=utf8 value="f" builtin_initializer=Swift.(file).Character extension.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (declref_expr implicit type='Character' location=main.swift:43:10 range=[main.swift:43:10 - line:43:10] decl=main.(file).digit(character:).$match@main.swift:43:10 function_ref=unapplied)))))
          (brace_stmt implicit range=[main.swift:44:9 - line:44:18]
            (assign_expr type='()' location=main.swift:44:16 range=[main.swift:44:9 - line:44:18]
              (declref_expr type='@lvalue Int?' location=main.swift:44:9 range=[main.swift:44:9 - line:44:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (inject_into_optional implicit type='Int?' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18]
                (call_expr implicit type='Int' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18] nothrow
                    (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:44:18 range=[main.swift:44:18 - line:44:18] value=15)))))))
        (case_stmt range=[main.swift:45:5 - line:46:18]
          (case_label_item default
          (pattern_any type='Character'))
          (brace_stmt implicit range=[main.swift:46:9 - line:46:18]
            (assign_expr type='()' location=main.swift:46:16 range=[main.swift:46:9 - line:46:18]
              (declref_expr type='@lvalue Int?' location=main.swift:46:9 range=[main.swift:46:9 - line:46:9] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)
              (dot_syntax_call_expr implicit type='Int?' location=main.swift:46:18 range=[main.swift:46:18 - line:46:18] nothrow
                (declref_expr implicit type='(Int?.Type) -> Int?' location=main.swift:46:18 range=[main.swift:46:18 - line:46:18] decl=Swift.(file).Optional.none [with (substitution_map generic_signature=<Wrapped> (substitution Wrapped -> Int))] function_ref=unapplied)
                (type_expr implicit type='Int?.Type' location=main.swift:46:18 range=[main.swift:46:18 - line:46:18] typerepr='Int?'))))))
      (return_stmt range=[main.swift:48:5 - line:48:12]
        (load_expr implicit type='Int?' location=main.swift:48:12 range=[main.swift:48:12 - line:48:12]
          (declref_expr type='@lvalue Int?' location=main.swift:48:12 range=[main.swift:48:12 - line:48:12] decl=main.(file).digit(character:).number@main.swift:11:9 function_ref=unapplied)))))
  (func_decl range=[main.swift:52:1 - line:62:1] "number(string:)" interface type='(String) -> Int' access=internal
    (parameter_list
      (parameter "string" apiName=string interface type='String') range=[main.swift:52:12 - line:52:26])
    (result
      (type_ident
        (component id='Int' bind=Swift.(file).Int)))
    (brace_stmt range=[main.swift:52:35 - line:62:1]
      (pattern_binding_decl range=[main.swift:53:5 - line:53:13]
        (pattern_named type='Int' 'x')
        (call_expr implicit type='Int' location=main.swift:53:13 range=[main.swift:53:13 - line:53:13] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:53:13 range=[main.swift:53:13 - line:53:13] nothrow
            (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:53:13 range=[main.swift:53:13 - line:53:13] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=main.swift:53:13 range=[main.swift:53:13 - line:53:13] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:53:13 range=[main.swift:53:13 - line:53:13] names=_builtinIntegerLiteral
            (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:53:13 range=[main.swift:53:13 - line:53:13] value=0))))

      (var_decl range=[main.swift:53:9 - line:53:9] "x" type='Int' interface type='Int' access=private readImpl=stored writeImpl=stored readWriteImpl=stored)

      (for_each_stmt range=[main.swift:54:5 - line:60:5]
        (pattern_named type='Character' 'character')
        (pattern_named type='Character' 'character')
        (declref_expr type='String' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22] decl=main.(file).number(string:).string@main.swift:52:13 function_ref=unapplied)
        (pattern_binding_decl implicit range=[main.swift:54:5 - line:54:22]
          (pattern_named implicit '$character$generator')
          (call_expr implicit type='String.Iterator' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22] nothrow arg_labels=
            (dot_syntax_call_expr implicit type='() -> String.Iterator' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22] nothrow
              (declref_expr implicit type='(__owned String) -> () -> String.Iterator' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22] decl=Swift.(file).String extension.makeIterator() function_ref=single)
              (paren_expr implicit type='(__owned String)' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22]
                (declref_expr type='String' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22] decl=main.(file).number(string:).string@main.swift:52:13 function_ref=unapplied)))
            (tuple_expr implicit type='()' location=main.swift:54:22 range=[main.swift:54:22 - line:54:22])))

        (call_expr implicit type='Character?' location=main.swift:54:19 range=[main.swift:54:19 - line:54:19] nothrow arg_labels=
          (dot_syntax_call_expr implicit type='() -> Character?' location=main.swift:54:19 range=[main.swift:54:19 - line:54:19] nothrow
            (declref_expr implicit type='(inout String.Iterator) -> () -> Character?' location=main.swift:54:19 range=[main.swift:54:19 - line:54:19] decl=Swift.(file).String extension.Iterator.next() function_ref=single)
            (inout_expr implicit type='inout String.Iterator' location=main.swift:54:19 range=[main.swift:54:19 - line:54:19]
              (declref_expr implicit type='@lvalue String.Iterator' location=main.swift:54:19 range=[main.swift:54:19 - line:54:19] decl=main.(file).number(string:).$character$generator@main.swift:54:19 function_ref=unapplied)))
          (tuple_expr implicit type='()' location=main.swift:54:19 range=[main.swift:54:19 - line:54:19]))
        (brace_stmt range=[main.swift:54:29 - line:60:5]
          (pattern_binding_decl range=[main.swift:55:9 - line:55:51]
            (pattern_named type='Int?' 'digitValue')
            (call_expr type='Int?' location=main.swift:55:26 range=[main.swift:55:26 - line:55:51] nothrow arg_labels=character:
              (declref_expr type='(Character) -> Int?' location=main.swift:55:26 range=[main.swift:55:26 - line:55:26] decl=main.(file).digit(character:)@main.swift:10:6 function_ref=single)
              (tuple_expr type='(character: Character)' location=main.swift:55:31 range=[main.swift:55:31 - line:55:51] names=character
                (declref_expr type='Character' location=main.swift:55:42 range=[main.swift:55:42 - line:55:42] decl=main.(file).number(string:).character@main.swift:54:9 function_ref=unapplied))))

          (var_decl range=[main.swift:55:13 - line:55:13] "digitValue" type='Int?' interface type='Int?' access=private let readImpl=stored immutable)

          (if_stmt range=[main.swift:56:9 - line:59:9]
            (binary_expr type='Bool' location=main.swift:56:23 range=[main.swift:56:12 - line:56:26] nothrow
              (dot_syntax_call_expr implicit type='(Int?, _OptionalNilComparisonType) -> Bool' location=main.swift:56:23 range=[main.swift:56:23 - line:56:23] nothrow
                (declref_expr type='(Optional<Int>.Type) -> (Int?, _OptionalNilComparisonType) -> Bool' location=main.swift:56:23 range=[main.swift:56:23 - line:56:23] decl=Swift.(file).Optional extension.!= [with (substitution_map generic_signature=<Wrapped> (substitution Wrapped -> Int))] function_ref=unapplied)
                (type_expr implicit type='Optional<Int>.Type' location=main.swift:56:23 range=[main.swift:56:23 - line:56:23] typerepr='Optional<Int>'))
              (tuple_expr implicit type='(Int?, _OptionalNilComparisonType)' location=main.swift:56:12 range=[main.swift:56:12 - line:56:26]
                (declref_expr type='Int?' location=main.swift:56:12 range=[main.swift:56:12 - line:56:12] decl=main.(file).number(string:).digitValue@main.swift:55:13 function_ref=unapplied)
                (call_expr implicit type='_OptionalNilComparisonType' location=main.swift:56:26 range=[main.swift:56:26 - line:56:26] nothrow arg_labels=nilLiteral:
                  (constructor_ref_call_expr implicit type='(()) -> _OptionalNilComparisonType' location=main.swift:56:26 range=[main.swift:56:26 - line:56:26] nothrow
                    (declref_expr implicit type='(_OptionalNilComparisonType.Type) -> (()) -> _OptionalNilComparisonType' location=main.swift:56:26 range=[main.swift:56:26 - line:56:26] decl=Swift.(file)._OptionalNilComparisonType.init(nilLiteral:) function_ref=single)
                    (type_expr implicit type='_OptionalNilComparisonType.Type' location=main.swift:56:26 range=[main.swift:56:26 - line:56:26] typerepr='_OptionalNilComparisonType'))
                  (tuple_expr implicit type='(nilLiteral: ())' location=main.swift:56:26 range=[main.swift:56:26 - line:56:26] names=nilLiteral
                    (tuple_expr type='()' location=main.swift:56:26 range=[main.swift:56:26 - line:56:26])))))
            (brace_stmt range=[main.swift:56:30 - line:59:9]
              (binary_expr type='()' location=main.swift:57:15 range=[main.swift:57:13 - line:57:18] nothrow
                (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:57:15 range=[main.swift:57:15 - line:57:15] nothrow
                  (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:57:15 range=[main.swift:57:15 - line:57:15] decl=Swift.(file).Int.*= function_ref=unapplied)
                  (type_expr implicit type='Int.Type' location=main.swift:57:15 range=[main.swift:57:15 - line:57:15] typerepr='Int'))
                (tuple_expr implicit type='(inout Int, Int)' location=main.swift:57:13 range=[main.swift:57:13 - line:57:18]
                  (inout_expr implicit type='inout Int' location=main.swift:57:13 range=[main.swift:57:13 - line:57:13]
                    (declref_expr type='@lvalue Int' location=main.swift:57:13 range=[main.swift:57:13 - line:57:13] decl=main.(file).number(string:).x@main.swift:53:9 function_ref=unapplied))
                  (call_expr implicit type='Int' location=main.swift:57:18 range=[main.swift:57:18 - line:57:18] nothrow arg_labels=_builtinIntegerLiteral:
                    (constructor_ref_call_expr implicit type='(IntLiteral) -> Int' location=main.swift:57:18 range=[main.swift:57:18 - line:57:18] nothrow
                      (declref_expr implicit type='(Int.Type) -> (IntLiteral) -> Int' location=main.swift:57:18 range=[main.swift:57:18 - line:57:18] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                      (type_expr implicit type='Int.Type' location=main.swift:57:18 range=[main.swift:57:18 - line:57:18] typerepr='Int'))
                    (tuple_expr implicit type='(_builtinIntegerLiteral: Builtin.IntLiteral)' location=main.swift:57:18 range=[main.swift:57:18 - line:57:18] names=_builtinIntegerLiteral
                      (integer_literal_expr type='Builtin.IntLiteral' location=main.swift:57:18 range=[main.swift:57:18 - line:57:18] value=16)))))
              (binary_expr type='()' location=main.swift:58:15 range=[main.swift:58:13 - line:58:28] nothrow
                (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:58:15 range=[main.swift:58:15 - line:58:15] nothrow
                  (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:58:15 range=[main.swift:58:15 - line:58:15] decl=Swift.(file).Int.+= function_ref=unapplied)
                  (type_expr implicit type='Int.Type' location=main.swift:58:15 range=[main.swift:58:15 - line:58:15] typerepr='Int'))
                (tuple_expr implicit type='(inout Int, Int)' location=main.swift:58:13 range=[main.swift:58:13 - line:58:28]
                  (inout_expr implicit type='inout Int' location=main.swift:58:13 range=[main.swift:58:13 - line:58:13]
                    (declref_expr type='@lvalue Int' location=main.swift:58:13 range=[main.swift:58:13 - line:58:13] decl=main.(file).number(string:).x@main.swift:53:9 function_ref=unapplied))
                  (force_value_expr type='Int' location=main.swift:58:28 range=[main.swift:58:18 - line:58:28]
                    (declref_expr type='Int?' location=main.swift:58:18 range=[main.swift:58:18 - line:58:18] decl=main.(file).number(string:).digitValue@main.swift:55:13 function_ref=unapplied))))))))
      (return_stmt range=[main.swift:61:5 - line:61:12]
        (load_expr implicit type='Int' location=main.swift:61:12 range=[main.swift:61:12 - line:61:12]
          (declref_expr type='@lvalue Int' location=main.swift:61:12 range=[main.swift:61:12 - line:61:12] decl=main.(file).number(string:).x@main.swift:53:9 function_ref=unapplied)))))
  (top_level_code_decl range=[main.swift:64:1 - line:64:32]
    (brace_stmt range=[main.swift:64:1 - line:64:32]
      (call_expr type='()' location=main.swift:64:1 range=[main.swift:64:1 - line:64:32] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=main.swift:64:1 range=[main.swift:64:1 - line:64:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:64:29 range=[main.swift:64:6 - line:64:32] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='(Any)' location=main.swift:64:29 range=[main.swift:64:6 - line:64:32]
            (erasure_expr implicit type='Any' location=main.swift:64:29 range=[main.swift:64:7 - line:64:31]
              (binary_expr type='Int' location=main.swift:64:29 range=[main.swift:64:7 - line:64:31] nothrow
                (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:64:29 range=[main.swift:64:29 - line:64:29] nothrow
                  (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:64:29 range=[main.swift:64:29 - line:64:29] decl=Swift.(file).Int extension./ function_ref=unapplied)
                  (type_expr implicit type='Int.Type' location=main.swift:64:29 range=[main.swift:64:29 - line:64:29] typerepr='Int'))
                (tuple_expr implicit type='(Int, Int)' location=main.swift:64:7 range=[main.swift:64:7 - line:64:31]
                  (call_expr type='Int' location=main.swift:64:7 range=[main.swift:64:7 - line:64:27] nothrow arg_labels=string:
                    (declref_expr type='(String) -> Int' location=main.swift:64:7 range=[main.swift:64:7 - line:64:7] decl=main.(file).number(string:)@main.swift:52:6 function_ref=double)
                    (tuple_expr type='(string: String)' location=main.swift:64:13 range=[main.swift:64:13 - line:64:27] names=string
                      (declref_expr type='String' location=main.swift:64:21 range=[main.swift:64:21 - line:64:21] decl=main.(file).string@main.swift:3:5 function_ref=unapplied)))
                  (declref_expr type='Int' location=main.swift:64:31 range=[main.swift:64:31 - line:64:31] decl=main.(file).m@main.swift:4:5 function_ref=unapplied))))))))))