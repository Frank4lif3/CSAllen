<?php
$servername = "172.31.30.196";
$username = "AHSSchedule";
$password = "5p[h#!TTTK?8Q92r";
$database = "AHSSchedule";

$connection = new mysqli($servername, $username, $password, $database);

/* Verify Connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
?>

<HTML>
    <BODY>
        <TABLE>
	    <?php
	    func getException(_ app:Application) throws {
        app.get("exceptions", "noLevel") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
                .filter(\.$level == nil)
                .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
        }

        app.get("exceptions", "noCategories") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
              .filter(\.$categories == nil)
              .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
        }

        app.get("exceptions", "noSubcategories") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
              .filter(\.$subcategories == nil)
              .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
        }

        app.get("exceptions", "noDescription") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
              .filter(\.$description == nil)
              .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
        }

        app.get("exceptions", "noLocation") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
              .filter(\.$location == nil)
              .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
        }

        app.get("exceptions", "noPeriods") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
              .filter(\.$periodsAvailable == nil)
              .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
        }
        app.get("exceptions", "noSemesterLength") {req -> Page<Course> in
            let courseData = try await CourseData.query(on: req.db)
              .filter(\.$semesterLength == nil)
              .paginate(for: req)
            let courses = try courseData.map{ try Course(courseData: $0) }

            return courses
	    

	    ?>

        </TABLE>
    </BODY>
</HTML>
