b

// ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
let unsortedStrings = ["senior", "hold", "laws", "repealed", "victory"]
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
// ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧


// Add your code below:
var new = unsortedStrings

func swap(strings:inout [String], firstIndex:Int,secondIndex:Int) {
    let f = strings[firstIndex]
    let s = strings[secondIndex]
    
    strings.remove(at:firstIndex)
    strings.insert(s, at:firstIndex)
    strings.remove(at:secondIndex)
    strings.insert(f, at:secondIndex)
}


var pass = 0
var swap = 0
var tSwap = 0

var lastTime = false
repeat {
    print("Pass: \(pass), Swaps: \(swaps)/\(tSwap), Array: \(new)")
    for x in - ..< sorted.count - 1 {
        if sorted[x] > sorted[x+1] {
            swaps += 1
            tSwaps += 1
            swap(strings:&new,firstIndex:x,secondIndex:x+1)
        }
    }
    pass += 1
    print("Pass: \(pass), Swaps: \(swaps)/\(tSwap), Array: \(new)")
    if swap == 0 {
        lastTime = true
    }
    swaps = 0
} while lastTime == false && tPass < sorted.count
