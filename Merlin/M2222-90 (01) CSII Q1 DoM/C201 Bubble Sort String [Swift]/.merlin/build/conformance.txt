(source_file "main.swift"
  (top_level_code_decl range=[main.swift:5:1 - line:5:123]
    (brace_stmt implicit range=[main.swift:5:1 - line:5:123]
      (pattern_binding_decl range=[main.swift:5:1 - line:5:123]
        (pattern_named type='[String]' 'unsortedStrings')
        Original init:
        (array_expr type='[String]' location=main.swift:5:23 range=[main.swift:5:23 - line:5:123] initializer=Swift.(file).Array extension.init(arrayLiteral:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
          (string_literal_expr type='String' location=main.swift:5:24 range=[main.swift:5:24 - line:5:24] encoding=utf8 value="sassy" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:33 range=[main.swift:5:33 - line:5:33] encoding=utf8 value="special" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:44 range=[main.swift:5:44 - line:5:44] encoding=utf8 value="envious" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:55 range=[main.swift:5:55 - line:5:55] encoding=utf8 value="combative" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:68 range=[main.swift:5:68 - line:5:68] encoding=utf8 value="children" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:80 range=[main.swift:5:80 - line:5:80] encoding=utf8 value="well-to-do" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:94 range=[main.swift:5:94 - line:5:94] encoding=utf8 value="ratty" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:103 range=[main.swift:5:103 - line:5:103] encoding=utf8 value="moor" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:111 range=[main.swift:5:111 - line:5:111] encoding=utf8 value="lamentable" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
        Processed init:
        (array_expr type='[String]' location=main.swift:5:23 range=[main.swift:5:23 - line:5:123] initializer=Swift.(file).Array extension.init(arrayLiteral:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
          (string_literal_expr type='String' location=main.swift:5:24 range=[main.swift:5:24 - line:5:24] encoding=utf8 value="sassy" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:33 range=[main.swift:5:33 - line:5:33] encoding=utf8 value="special" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:44 range=[main.swift:5:44 - line:5:44] encoding=utf8 value="envious" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:55 range=[main.swift:5:55 - line:5:55] encoding=utf8 value="combative" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:68 range=[main.swift:5:68 - line:5:68] encoding=utf8 value="children" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:80 range=[main.swift:5:80 - line:5:80] encoding=utf8 value="well-to-do" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:94 range=[main.swift:5:94 - line:5:94] encoding=utf8 value="ratty" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:103 range=[main.swift:5:103 - line:5:103] encoding=utf8 value="moor" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:111 range=[main.swift:5:111 - line:5:111] encoding=utf8 value="lamentable" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
))
  (var_decl range=[main.swift:5:5 - line:5:5] "unsortedStrings" type='[String]' interface type='[String]' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:11:1 - line:11:13]
    (brace_stmt implicit range=[main.swift:11:1 - line:11:13]
      (pattern_binding_decl range=[main.swift:11:1 - line:11:13]
        (pattern_named type='[String]' 'array')
        Original init:
        (unresolved_decl_ref_expr type='<null>' name=unsortedStrings function_ref=unapplied)
        Processed init:
        (declref_expr type='[String]' location=main.swift:11:13 range=[main.swift:11:13 - line:11:13] decl=main.(file).unsortedStrings@main.swift:5:5 function_ref=unapplied))
))
  (var_decl range=[main.swift:11:5 - line:11:5] "array" type='[String]' interface type='[String]' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (func_decl range=[main.swift:12:1 - line:19:1] "swap(strings:firstIndex:secondIndex:)" interface type='(inout [String], Int, Int) -> ()' access=internal
    (parameter_list
      (parameter "strings" apiName=strings type='[String]' interface type='[String]' inout)
      (parameter "firstIndex" apiName=firstIndex type='Int' interface type='Int')
      (parameter "secondIndex" apiName=secondIndex type='Int' interface type='Int') range=[main.swift:12:10 - line:12:65])
    (brace_stmt range=[main.swift:12:67 - line:19:1]
      (pattern_binding_decl range=[main.swift:13:5 - line:13:32]
        (pattern_named type='String' 'fI')
        Original init:
        (subscript_expr type='<null>' arg_labels=_:
          (declref_expr type='@lvalue [String]' location=main.swift:13:14 range=[main.swift:13:14 - line:13:14] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied)
          (paren_expr type='(Int)' location=main.swift:13:22 range=[main.swift:13:21 - line:13:32]
            (declref_expr type='Int' location=main.swift:13:22 range=[main.swift:13:22 - line:13:22] decl=main.(file).swap(strings:firstIndex:secondIndex:).firstIndex@main.swift:12:34 function_ref=unapplied)))
        Processed init:
        (load_expr implicit type='String' location=main.swift:13:21 range=[main.swift:13:14 - line:13:32]
          (subscript_expr type='@lvalue String' location=main.swift:13:21 range=[main.swift:13:14 - line:13:32] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
            (inout_expr implicit type='inout Array<String>' location=main.swift:13:14 range=[main.swift:13:14 - line:13:14]
              (declref_expr type='@lvalue [String]' location=main.swift:13:14 range=[main.swift:13:14 - line:13:14] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied))
            (paren_expr type='(Int)' location=main.swift:13:22 range=[main.swift:13:21 - line:13:32]
              (declref_expr type='Int' location=main.swift:13:22 range=[main.swift:13:22 - line:13:22] decl=main.(file).swap(strings:firstIndex:secondIndex:).firstIndex@main.swift:12:34 function_ref=unapplied)))))

      (var_decl range=[main.swift:13:9 - line:13:9] "fI" type='String' interface type='String' access=private let readImpl=stored immutable)

      (pattern_binding_decl range=[main.swift:14:5 - line:14:33]
        (pattern_named type='String' 'sI')
        Original init:
        (subscript_expr type='<null>' arg_labels=_:
          (declref_expr type='@lvalue [String]' location=main.swift:14:14 range=[main.swift:14:14 - line:14:14] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied)
          (paren_expr type='(Int)' location=main.swift:14:22 range=[main.swift:14:21 - line:14:33]
            (declref_expr type='Int' location=main.swift:14:22 range=[main.swift:14:22 - line:14:22] decl=main.(file).swap(strings:firstIndex:secondIndex:).secondIndex@main.swift:12:50 function_ref=unapplied)))
        Processed init:
        (load_expr implicit type='String' location=main.swift:14:21 range=[main.swift:14:14 - line:14:33]
          (subscript_expr type='@lvalue String' location=main.swift:14:21 range=[main.swift:14:14 - line:14:33] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
            (inout_expr implicit type='inout Array<String>' location=main.swift:14:14 range=[main.swift:14:14 - line:14:14]
              (declref_expr type='@lvalue [String]' location=main.swift:14:14 range=[main.swift:14:14 - line:14:14] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied))
            (paren_expr type='(Int)' location=main.swift:14:22 range=[main.swift:14:21 - line:14:33]
              (declref_expr type='Int' location=main.swift:14:22 range=[main.swift:14:22 - line:14:22] decl=main.(file).swap(strings:firstIndex:secondIndex:).secondIndex@main.swift:12:50 function_ref=unapplied)))))

      (var_decl range=[main.swift:14:9 - line:14:9] "sI" type='String' interface type='String' access=private let readImpl=stored immutable)

      (call_expr type='String' location=main.swift:15:13 range=[main.swift:15:5 - line:15:33] nothrow arg_labels=at:
        (dot_syntax_call_expr type='(Int) -> String' location=main.swift:15:13 range=[main.swift:15:5 - line:15:13] nothrow
          (declref_expr type='(inout Array<String>) -> (Int) -> String' location=main.swift:15:13 range=[main.swift:15:13 - line:15:13] decl=Swift.(file).Array extension.remove(at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:15:5 range=[main.swift:15:5 - line:15:5]
            (declref_expr type='@lvalue [String]' location=main.swift:15:5 range=[main.swift:15:5 - line:15:5] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied)))
        (tuple_expr type='(at: Int)' location=main.swift:15:19 range=[main.swift:15:19 - line:15:33] names=at
          (declref_expr type='Int' location=main.swift:15:23 range=[main.swift:15:23 - line:15:23] decl=main.(file).swap(strings:firstIndex:secondIndex:).firstIndex@main.swift:12:34 function_ref=unapplied)))
      (call_expr type='()' location=main.swift:16:13 range=[main.swift:16:5 - line:16:37] nothrow arg_labels=_:at:
        (dot_syntax_call_expr type='(__owned String, Int) -> ()' location=main.swift:16:13 range=[main.swift:16:5 - line:16:13] nothrow
          (declref_expr type='(inout Array<String>) -> (__owned String, Int) -> ()' location=main.swift:16:13 range=[main.swift:16:13 - line:16:13] decl=Swift.(file).Array extension.insert(_:at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:16:5 range=[main.swift:16:5 - line:16:5]
            (declref_expr type='@lvalue [String]' location=main.swift:16:5 range=[main.swift:16:5 - line:16:5] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied)))
        (tuple_expr type='(__owned String, at: Int)' location=main.swift:16:19 range=[main.swift:16:19 - line:16:37] names='',at
          (declref_expr type='String' location=main.swift:16:20 range=[main.swift:16:20 - line:16:20] decl=main.(file).swap(strings:firstIndex:secondIndex:).sI@main.swift:14:9 function_ref=unapplied)
          (declref_expr type='Int' location=main.swift:16:27 range=[main.swift:16:27 - line:16:27] decl=main.(file).swap(strings:firstIndex:secondIndex:).firstIndex@main.swift:12:34 function_ref=unapplied)))
      (call_expr type='String' location=main.swift:17:13 range=[main.swift:17:5 - line:17:34] nothrow arg_labels=at:
        (dot_syntax_call_expr type='(Int) -> String' location=main.swift:17:13 range=[main.swift:17:5 - line:17:13] nothrow
          (declref_expr type='(inout Array<String>) -> (Int) -> String' location=main.swift:17:13 range=[main.swift:17:13 - line:17:13] decl=Swift.(file).Array extension.remove(at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:17:5 range=[main.swift:17:5 - line:17:5]
            (declref_expr type='@lvalue [String]' location=main.swift:17:5 range=[main.swift:17:5 - line:17:5] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied)))
        (tuple_expr type='(at: Int)' location=main.swift:17:19 range=[main.swift:17:19 - line:17:34] names=at
          (declref_expr type='Int' location=main.swift:17:23 range=[main.swift:17:23 - line:17:23] decl=main.(file).swap(strings:firstIndex:secondIndex:).secondIndex@main.swift:12:50 function_ref=unapplied)))
      (call_expr type='()' location=main.swift:18:13 range=[main.swift:18:5 - line:18:37] nothrow arg_labels=_:at:
        (dot_syntax_call_expr type='(__owned String, Int) -> ()' location=main.swift:18:13 range=[main.swift:18:5 - line:18:13] nothrow
          (declref_expr type='(inout Array<String>) -> (__owned String, Int) -> ()' location=main.swift:18:13 range=[main.swift:18:13 - line:18:13] decl=Swift.(file).Array extension.insert(_:at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:18:5 range=[main.swift:18:5 - line:18:5]
            (declref_expr type='@lvalue [String]' location=main.swift:18:5 range=[main.swift:18:5 - line:18:5] decl=main.(file).swap(strings:firstIndex:secondIndex:).strings@main.swift:12:11 function_ref=unapplied)))
        (tuple_expr type='(__owned String, at: Int)' location=main.swift:18:19 range=[main.swift:18:19 - line:18:37] names='',at
          (declref_expr type='String' location=main.swift:18:20 range=[main.swift:18:20 - line:18:20] decl=main.(file).swap(strings:firstIndex:secondIndex:).fI@main.swift:13:9 function_ref=unapplied)
          (declref_expr type='Int' location=main.swift:18:26 range=[main.swift:18:26 - line:18:26] decl=main.(file).swap(strings:firstIndex:secondIndex:).secondIndex@main.swift:12:50 function_ref=unapplied)))))
  (top_level_code_decl range=[main.swift:21:1 - line:21:13]
    (brace_stmt implicit range=[main.swift:21:1 - line:21:13]
      (pattern_binding_decl range=[main.swift:21:1 - line:21:13]
        (pattern_named type='Int' 'swaps')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:21:13 range=[main.swift:21:13 - line:21:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:21:13 range=[main.swift:21:13 - line:21:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:21:5 - line:21:5] "swaps" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:22:1 - line:22:13]
    (brace_stmt implicit range=[main.swift:22:1 - line:22:13]
      (pattern_binding_decl range=[main.swift:22:1 - line:22:13]
        (pattern_named type='Int' 'tSwap')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:22:13 range=[main.swift:22:13 - line:22:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:22:13 range=[main.swift:22:13 - line:22:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:22:5 - line:22:5] "tSwap" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:23:1 - line:23:12]
    (brace_stmt implicit range=[main.swift:23:1 - line:23:12]
      (pattern_binding_decl range=[main.swift:23:1 - line:23:12]
        (pattern_named type='Int' 'pass')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:23:12 range=[main.swift:23:12 - line:23:12] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:23:12 range=[main.swift:23:12 - line:23:12] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:23:5 - line:23:5] "pass" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:24:1 - line:24:65]
    (brace_stmt range=[main.swift:24:1 - line:24:65]
      (call_expr type='()' location=main.swift:24:1 range=[main.swift:24:1 - line:24:65] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=main.swift:24:1 range=[main.swift:24:1 - line:24:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:24:6 range=[main.swift:24:6 - line:24:65] names='',separator,terminator
          (vararg_expansion_expr implicit type='[Any]' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7]
            (array_expr implicit type='[Any]' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7] initializer=**NULL**
              (erasure_expr implicit type='Any' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7]
                (interpolated_string_literal_expr type='String' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7] trailing_quote_loc=main.swift:24:64 literal_capacity=25 interpolation_count=4 builder_init=Swift.(file).DefaultStringInterpolation.init(literalCapacity:interpolationCount:) result_init=Swift.(file).String extension.init(stringInterpolation:)
                  (tap_expr implicit type='DefaultStringInterpolation' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7] var=main.(file).top-level code.$interpolation
                    (opaque_value_expr implicit type='DefaultStringInterpolation' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7] @ 0x8bc4908)
                    (brace_stmt implicit range=[main.swift:24:7 - line:24:7]
                      (var_decl implicit "$interpolation" type='DefaultStringInterpolation' interface type='DefaultStringInterpolation' access=fileprivate non_pattern_init readImpl=stored writeImpl=stored readWriteImpl=stored)

                      (call_expr implicit type='()' location=main.swift:24:8 range=[main.swift:24:8 - line:24:7] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:24:8 range=[main.swift:24:8 - line:24:8] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:8 range=[main.swift:24:8 - line:24:8]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:8 range=[main.swift:24:8 - line:24:8] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7]
                          (string_literal_expr type='String' location=main.swift:24:7 range=[main.swift:24:7 - line:24:7] encoding=utf8 value="Pass: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:24:15 range=[main.swift:24:15 - line:24:20] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:24:15 range=[main.swift:24:15 - line:24:15] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:24:15 range=[main.swift:24:15 - line:24:15] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:15 range=[main.swift:24:15 - line:24:15]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:15 range=[main.swift:24:15 - line:24:15] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='(Int)' location=main.swift:24:16 range=[main.swift:24:15 - line:24:20]
                          (load_expr implicit type='Int' location=main.swift:24:16 range=[main.swift:24:16 - line:24:16]
                            (declref_expr type='@lvalue Int' location=main.swift:24:16 range=[main.swift:24:16 - line:24:16] decl=main.(file).pass@main.swift:23:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21]
                          (string_literal_expr type='String' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21] encoding=utf8 value=", Swaps: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:24:31 range=[main.swift:24:31 - line:24:37] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:24:31 range=[main.swift:24:31 - line:24:31] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:24:31 range=[main.swift:24:31 - line:24:31] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:31 range=[main.swift:24:31 - line:24:31]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:31 range=[main.swift:24:31 - line:24:31] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='(Int)' location=main.swift:24:32 range=[main.swift:24:31 - line:24:37]
                          (load_expr implicit type='Int' location=main.swift:24:32 range=[main.swift:24:32 - line:24:32]
                            (declref_expr type='@lvalue Int' location=main.swift:24:32 range=[main.swift:24:32 - line:24:32] decl=main.(file).swaps@main.swift:21:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:24:38 range=[main.swift:24:38 - line:24:38] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:24:38 range=[main.swift:24:38 - line:24:38] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:38 range=[main.swift:24:38 - line:24:38]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:38 range=[main.swift:24:38 - line:24:38] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:24:38 range=[main.swift:24:38 - line:24:38]
                          (string_literal_expr type='String' location=main.swift:24:38 range=[main.swift:24:38 - line:24:38] encoding=utf8 value="/" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:24:40 range=[main.swift:24:40 - line:24:46] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:24:40 range=[main.swift:24:40 - line:24:40] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:24:40 range=[main.swift:24:40 - line:24:40] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:40 range=[main.swift:24:40 - line:24:40]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:40 range=[main.swift:24:40 - line:24:40] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='(Int)' location=main.swift:24:41 range=[main.swift:24:40 - line:24:46]
                          (load_expr implicit type='Int' location=main.swift:24:41 range=[main.swift:24:41 - line:24:41]
                            (declref_expr type='@lvalue Int' location=main.swift:24:41 range=[main.swift:24:41 - line:24:41] decl=main.(file).tSwap@main.swift:22:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:24:47 range=[main.swift:24:47 - line:24:47] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:24:47 range=[main.swift:24:47 - line:24:47] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:47 range=[main.swift:24:47 - line:24:47]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:47 range=[main.swift:24:47 - line:24:47] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:24:47 range=[main.swift:24:47 - line:24:47]
                          (string_literal_expr type='String' location=main.swift:24:47 range=[main.swift:24:47 - line:24:47] encoding=utf8 value=", Array: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:24:57 range=[main.swift:24:57 - line:24:63] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='([String]) -> ()' location=main.swift:24:57 range=[main.swift:24:57 - line:24:57] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> ([String]) -> ()' location=main.swift:24:57 range=[main.swift:24:57 - line:24:57] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> [String]))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:57 range=[main.swift:24:57 - line:24:57]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:57 range=[main.swift:24:57 - line:24:57] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='([String])' location=main.swift:24:58 range=[main.swift:24:57 - line:24:63]
                          (load_expr implicit type='[String]' location=main.swift:24:58 range=[main.swift:24:58 - line:24:58]
                            (declref_expr type='@lvalue [String]' location=main.swift:24:58 range=[main.swift:24:58 - line:24:58] decl=main.(file).array@main.swift:11:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:24:64 range=[main.swift:24:64 - line:24:64] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:24:64 range=[main.swift:24:64 - line:24:64] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:24:64 range=[main.swift:24:64 - line:24:64]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:24:64 range=[main.swift:24:64 - line:24:64] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:24:64 range=[main.swift:24:64 - line:24:64]
                          (string_literal_expr type='String' location=main.swift:24:64 range=[main.swift:24:64 - line:24:64] encoding=utf8 value="" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))))
          (default_argument_expr implicit type='String' location=main.swift:24:6 range=[main.swift:24:6 - line:24:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1)
          (default_argument_expr implicit type='String' location=main.swift:24:6 range=[main.swift:24:6 - line:24:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2)))))
  (top_level_code_decl range=[main.swift:25:1 - line:38:40]
    (brace_stmt range=[main.swift:25:1 - line:38:40]
      (repeat_while_stmt range=[main.swift:25:1 - line:38:40]
        (brace_stmt range=[main.swift:25:8 - line:38:1]
          (assign_expr type='()' location=main.swift:27:11 range=[main.swift:27:5 - line:27:13]
            (declref_expr type='@lvalue Int' location=main.swift:27:5 range=[main.swift:27:5 - line:27:5] decl=main.(file).swaps@main.swift:21:5 function_ref=unapplied)
            (integer_literal_expr type='Int' location=main.swift:27:13 range=[main.swift:27:13 - line:27:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
          (for_each_stmt range=[main.swift:28:5 - line:35:5] make_generator=Swift.(file).Collection extension.makeIterator() [with (substitution_map generic_signature=<Self where Self : Collection, Self.Iterator == IndexingIterator<Self>> (substitution Self -> Range<Int>))] next=Swift.(file).IndexingIterator extension.next() [with (substitution_map generic_signature=<Elements where Elements : Collection> (substitution Elements -> Range<Int>))]
            (pattern_named type='Int' 'index')
            (pattern_named type='Int' 'index')
            (binary_expr type='Range<Int>' location=main.swift:28:20 range=[main.swift:28:18 - line:28:38] nothrow
              (dot_syntax_call_expr implicit type='(Int, Int) -> Range<Int>' location=main.swift:28:20 range=[main.swift:28:20 - line:28:20] nothrow
                (declref_expr type='(Int.Type) -> (Int, Int) -> Range<Int>' location=main.swift:28:20 range=[main.swift:28:20 - line:28:20] decl=Swift.(file).Comparable extension...< [with (substitution_map generic_signature=<Self where Self : Comparable> (substitution Self -> Int))] function_ref=unapplied)
                (type_expr implicit type='Int.Type' location=main.swift:28:20 range=[main.swift:28:20 - line:28:20] typerepr='Int'))
              (tuple_expr implicit type='(Int, Int)' location=main.swift:28:18 range=[main.swift:28:18 - line:28:38]
                (integer_literal_expr type='Int' location=main.swift:28:18 range=[main.swift:28:18 - line:28:18] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
                (binary_expr type='Int' location=main.swift:28:36 range=[main.swift:28:24 - line:28:38] nothrow
                  (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:28:36 range=[main.swift:28:36 - line:28:36] nothrow
                    (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:28:36 range=[main.swift:28:36 - line:28:36] decl=Swift.(file).Int extension.- function_ref=unapplied)
                    (type_expr implicit type='Int.Type' location=main.swift:28:36 range=[main.swift:28:36 - line:28:36] typerepr='Int'))
                  (tuple_expr implicit type='(Int, Int)' location=main.swift:28:24 range=[main.swift:28:24 - line:28:38]
                    (member_ref_expr type='Int' location=main.swift:28:30 range=[main.swift:28:24 - line:28:30] decl=Swift.(file).Array extension.count [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
                      (load_expr implicit type='[String]' location=main.swift:28:24 range=[main.swift:28:24 - line:28:24]
                        (declref_expr type='@lvalue [String]' location=main.swift:28:24 range=[main.swift:28:24 - line:28:24] decl=main.(file).array@main.swift:11:5 function_ref=unapplied)))
                    (integer_literal_expr type='Int' location=main.swift:28:38 range=[main.swift:28:38 - line:28:38] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))
            (var_decl implicit range=[main.swift:28:15 - line:28:15] "$index$generator" type='Range<Int>.Iterator' interface type='Range<Int>.Iterator' access=fileprivate readImpl=stored writeImpl=stored readWriteImpl=stored)

            (declref_expr implicit type='@lvalue Range<Int>.Iterator' location=main.swift:28:15 range=[main.swift:28:15 - line:28:15] decl=main.(file).top-level code.$index$generator@main.swift:28:15 function_ref=unapplied)
            (brace_stmt range=[main.swift:28:40 - line:35:5]
              (if_stmt range=[main.swift:30:9 - line:34:9]
                (binary_expr type='Bool' location=main.swift:30:25 range=[main.swift:30:12 - line:30:40] nothrow
                  (dot_syntax_call_expr implicit type='(String, String) -> Bool' location=main.swift:30:25 range=[main.swift:30:25 - line:30:25] nothrow
                    (declref_expr implicit type='(String.Type) -> (String, String) -> Bool' location=main.swift:30:25 range=[main.swift:30:25 - line:30:25] decl=Swift.(file).Comparable extension.> [with (substitution_map generic_signature=<Self where Self : Comparable> (substitution Self -> String))] function_ref=double)
                    (type_expr implicit type='String.Type' location=main.swift:30:25 range=[main.swift:30:25 - line:30:25] typerepr='String'))
                  (tuple_expr implicit type='(String, String)' location=main.swift:30:12 range=[main.swift:30:12 - line:30:40]
                    (load_expr implicit type='String' location=main.swift:30:17 range=[main.swift:30:12 - line:30:23]
                      (subscript_expr type='@lvalue String' location=main.swift:30:17 range=[main.swift:30:12 - line:30:23] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
                        (inout_expr implicit type='inout Array<String>' location=main.swift:30:12 range=[main.swift:30:12 - line:30:12]
                          (declref_expr type='@lvalue [String]' location=main.swift:30:12 range=[main.swift:30:12 - line:30:12] decl=main.(file).array@main.swift:11:5 function_ref=unapplied))
                        (paren_expr type='(Int)' location=main.swift:30:18 range=[main.swift:30:17 - line:30:23]
                          (declref_expr type='Int' location=main.swift:30:18 range=[main.swift:30:18 - line:30:18] decl=main.(file).top-level code.index@main.swift:28:9 function_ref=unapplied))))
                    (load_expr implicit type='String' location=main.swift:30:32 range=[main.swift:30:27 - line:30:40]
                      (subscript_expr type='@lvalue String' location=main.swift:30:32 range=[main.swift:30:27 - line:30:40] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
                        (inout_expr implicit type='inout Array<String>' location=main.swift:30:27 range=[main.swift:30:27 - line:30:27]
                          (declref_expr type='@lvalue [String]' location=main.swift:30:27 range=[main.swift:30:27 - line:30:27] decl=main.(file).array@main.swift:11:5 function_ref=unapplied))
                        (paren_expr type='(Int)' location=main.swift:30:38 range=[main.swift:30:32 - line:30:40]
                          (binary_expr type='Int' location=main.swift:30:38 range=[main.swift:30:33 - line:30:39] nothrow
                            (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:30:38 range=[main.swift:30:38 - line:30:38] nothrow
                              (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:30:38 range=[main.swift:30:38 - line:30:38] decl=Swift.(file).Int extension.+ function_ref=unapplied)
                              (type_expr implicit type='Int.Type' location=main.swift:30:38 range=[main.swift:30:38 - line:30:38] typerepr='Int'))
                            (tuple_expr implicit type='(Int, Int)' location=main.swift:30:33 range=[main.swift:30:33 - line:30:39]
                              (declref_expr type='Int' location=main.swift:30:33 range=[main.swift:30:33 - line:30:33] decl=main.(file).top-level code.index@main.swift:28:9 function_ref=unapplied)
                              (integer_literal_expr type='Int' location=main.swift:30:39 range=[main.swift:30:39 - line:30:39] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))))))))
                (brace_stmt range=[main.swift:30:42 - line:34:9]
                  (call_expr type='()' location=main.swift:31:13 range=[main.swift:31:13 - line:31:69] nothrow arg_labels=strings:firstIndex:secondIndex:
                    (declref_expr type='(inout [String], Int, Int) -> ()' location=main.swift:31:13 range=[main.swift:31:13 - line:31:13] decl=main.(file).swap(strings:firstIndex:secondIndex:)@main.swift:12:6 function_ref=single)
                    (tuple_expr type='(strings: inout [String], firstIndex: Int, secondIndex: Int)' location=main.swift:31:17 range=[main.swift:31:17 - line:31:69] names=strings,firstIndex,secondIndex
                      (inout_expr type='inout [String]' location=main.swift:31:26 range=[main.swift:31:26 - line:31:27]
                        (declref_expr type='@lvalue [String]' location=main.swift:31:27 range=[main.swift:31:27 - line:31:27] decl=main.(file).array@main.swift:11:5 function_ref=unapplied))
                      (declref_expr type='Int' location=main.swift:31:44 range=[main.swift:31:44 - line:31:44] decl=main.(file).top-level code.index@main.swift:28:9 function_ref=unapplied)
                      (binary_expr type='Int' location=main.swift:31:67 range=[main.swift:31:62 - line:31:68] nothrow
                        (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:31:67 range=[main.swift:31:67 - line:31:67] nothrow
                          (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:31:67 range=[main.swift:31:67 - line:31:67] decl=Swift.(file).Int extension.+ function_ref=unapplied)
                          (type_expr implicit type='Int.Type' location=main.swift:31:67 range=[main.swift:31:67 - line:31:67] typerepr='Int'))
                        (tuple_expr implicit type='(Int, Int)' location=main.swift:31:62 range=[main.swift:31:62 - line:31:68]
                          (declref_expr type='Int' location=main.swift:31:62 range=[main.swift:31:62 - line:31:62] decl=main.(file).top-level code.index@main.swift:28:9 function_ref=unapplied)
                          (integer_literal_expr type='Int' location=main.swift:31:68 range=[main.swift:31:68 - line:31:68] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))
                  (binary_expr type='()' location=main.swift:32:19 range=[main.swift:32:13 - line:32:22] nothrow
                    (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:32:19 range=[main.swift:32:19 - line:32:19] nothrow
                      (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:32:19 range=[main.swift:32:19 - line:32:19] decl=Swift.(file).Int.+= function_ref=unapplied)
                      (type_expr implicit type='Int.Type' location=main.swift:32:19 range=[main.swift:32:19 - line:32:19] typerepr='Int'))
                    (tuple_expr implicit type='(inout Int, Int)' location=main.swift:32:13 range=[main.swift:32:13 - line:32:22]
                      (inout_expr implicit type='inout Int' location=main.swift:32:13 range=[main.swift:32:13 - line:32:13]
                        (declref_expr type='@lvalue Int' location=main.swift:32:13 range=[main.swift:32:13 - line:32:13] decl=main.(file).swaps@main.swift:21:5 function_ref=unapplied))
                      (integer_literal_expr type='Int' location=main.swift:32:22 range=[main.swift:32:22 - line:32:22] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                  (binary_expr type='()' location=main.swift:33:19 range=[main.swift:33:13 - line:33:22] nothrow
                    (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:33:19 range=[main.swift:33:19 - line:33:19] nothrow
                      (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:33:19 range=[main.swift:33:19 - line:33:19] decl=Swift.(file).Int.+= function_ref=unapplied)
                      (type_expr implicit type='Int.Type' location=main.swift:33:19 range=[main.swift:33:19 - line:33:19] typerepr='Int'))
                    (tuple_expr implicit type='(inout Int, Int)' location=main.swift:33:13 range=[main.swift:33:13 - line:33:22]
                      (inout_expr implicit type='inout Int' location=main.swift:33:13 range=[main.swift:33:13 - line:33:13]
                        (declref_expr type='@lvalue Int' location=main.swift:33:13 range=[main.swift:33:13 - line:33:13] decl=main.(file).tSwap@main.swift:22:5 function_ref=unapplied))
                      (integer_literal_expr type='Int' location=main.swift:33:22 range=[main.swift:33:22 - line:33:22] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))))
          (binary_expr type='()' location=main.swift:36:10 range=[main.swift:36:5 - line:36:13] nothrow
            (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:36:10 range=[main.swift:36:10 - line:36:10] nothrow
              (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:36:10 range=[main.swift:36:10 - line:36:10] decl=Swift.(file).Int.+= function_ref=unapplied)
              (type_expr implicit type='Int.Type' location=main.swift:36:10 range=[main.swift:36:10 - line:36:10] typerepr='Int'))
            (tuple_expr implicit type='(inout Int, Int)' location=main.swift:36:5 range=[main.swift:36:5 - line:36:13]
              (inout_expr implicit type='inout Int' location=main.swift:36:5 range=[main.swift:36:5 - line:36:5]
                (declref_expr type='@lvalue Int' location=main.swift:36:5 range=[main.swift:36:5 - line:36:5] decl=main.(file).pass@main.swift:23:5 function_ref=unapplied))
              (integer_literal_expr type='Int' location=main.swift:36:13 range=[main.swift:36:13 - line:36:13] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
          (call_expr type='()' location=main.swift:37:5 range=[main.swift:37:5 - line:37:69] nothrow arg_labels=_:
            (declref_expr type='(Any..., String, String) -> ()' location=main.swift:37:5 range=[main.swift:37:5 - line:37:5] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (tuple_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:37:10 range=[main.swift:37:10 - line:37:69] names='',separator,terminator
              (vararg_expansion_expr implicit type='[Any]' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11]
                (array_expr implicit type='[Any]' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] initializer=**NULL**
                  (erasure_expr implicit type='Any' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11]
                    (interpolated_string_literal_expr type='String' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] trailing_quote_loc=main.swift:37:68 literal_capacity=25 interpolation_count=4 builder_init=Swift.(file).DefaultStringInterpolation.init(literalCapacity:interpolationCount:) result_init=Swift.(file).String extension.init(stringInterpolation:)
                      (tap_expr implicit type='DefaultStringInterpolation' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] var=main.(file).top-level code.$interpolation
                        (opaque_value_expr implicit type='DefaultStringInterpolation' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] @ 0x95c55a8)
                        (brace_stmt implicit range=[main.swift:37:11 - line:37:11]
                          (var_decl implicit "$interpolation" type='DefaultStringInterpolation' interface type='DefaultStringInterpolation' access=fileprivate non_pattern_init readImpl=stored writeImpl=stored readWriteImpl=stored)

                          (call_expr implicit type='()' location=main.swift:37:12 range=[main.swift:37:12 - line:37:11] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:37:12 range=[main.swift:37:12 - line:37:12] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:12 range=[main.swift:37:12 - line:37:12]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:12 range=[main.swift:37:12 - line:37:12] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11]
                              (string_literal_expr type='String' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] encoding=utf8 value="Pass: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:37:19 range=[main.swift:37:19 - line:37:24] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:37:19 range=[main.swift:37:19 - line:37:19] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:37:19 range=[main.swift:37:19 - line:37:19] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:19 range=[main.swift:37:19 - line:37:19]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:19 range=[main.swift:37:19 - line:37:19] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='(Int)' location=main.swift:37:20 range=[main.swift:37:19 - line:37:24]
                              (load_expr implicit type='Int' location=main.swift:37:20 range=[main.swift:37:20 - line:37:20]
                                (declref_expr type='@lvalue Int' location=main.swift:37:20 range=[main.swift:37:20 - line:37:20] decl=main.(file).pass@main.swift:23:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:37:25 range=[main.swift:37:25 - line:37:25] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:37:25 range=[main.swift:37:25 - line:37:25] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:25 range=[main.swift:37:25 - line:37:25]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:25 range=[main.swift:37:25 - line:37:25] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:37:25 range=[main.swift:37:25 - line:37:25]
                              (string_literal_expr type='String' location=main.swift:37:25 range=[main.swift:37:25 - line:37:25] encoding=utf8 value=", Swaps: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:37:35 range=[main.swift:37:35 - line:37:41] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:37:35 range=[main.swift:37:35 - line:37:35] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:37:35 range=[main.swift:37:35 - line:37:35] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:35 range=[main.swift:37:35 - line:37:35]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:35 range=[main.swift:37:35 - line:37:35] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='(Int)' location=main.swift:37:36 range=[main.swift:37:35 - line:37:41]
                              (load_expr implicit type='Int' location=main.swift:37:36 range=[main.swift:37:36 - line:37:36]
                                (declref_expr type='@lvalue Int' location=main.swift:37:36 range=[main.swift:37:36 - line:37:36] decl=main.(file).swaps@main.swift:21:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:37:42 range=[main.swift:37:42 - line:37:42] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:37:42 range=[main.swift:37:42 - line:37:42] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:42 range=[main.swift:37:42 - line:37:42]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:42 range=[main.swift:37:42 - line:37:42] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:37:42 range=[main.swift:37:42 - line:37:42]
                              (string_literal_expr type='String' location=main.swift:37:42 range=[main.swift:37:42 - line:37:42] encoding=utf8 value="/" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:37:44 range=[main.swift:37:44 - line:37:50] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:37:44 range=[main.swift:37:44 - line:37:44] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:37:44 range=[main.swift:37:44 - line:37:44] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:44 range=[main.swift:37:44 - line:37:44]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:44 range=[main.swift:37:44 - line:37:44] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='(Int)' location=main.swift:37:45 range=[main.swift:37:44 - line:37:50]
                              (load_expr implicit type='Int' location=main.swift:37:45 range=[main.swift:37:45 - line:37:45]
                                (declref_expr type='@lvalue Int' location=main.swift:37:45 range=[main.swift:37:45 - line:37:45] decl=main.(file).tSwap@main.swift:22:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:37:51 range=[main.swift:37:51 - line:37:51] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:37:51 range=[main.swift:37:51 - line:37:51] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:51 range=[main.swift:37:51 - line:37:51]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:51 range=[main.swift:37:51 - line:37:51] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:37:51 range=[main.swift:37:51 - line:37:51]
                              (string_literal_expr type='String' location=main.swift:37:51 range=[main.swift:37:51 - line:37:51] encoding=utf8 value=", Array: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:37:61 range=[main.swift:37:61 - line:37:67] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='([String]) -> ()' location=main.swift:37:61 range=[main.swift:37:61 - line:37:61] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> ([String]) -> ()' location=main.swift:37:61 range=[main.swift:37:61 - line:37:61] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> [String]))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:61 range=[main.swift:37:61 - line:37:61]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:61 range=[main.swift:37:61 - line:37:61] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='([String])' location=main.swift:37:62 range=[main.swift:37:61 - line:37:67]
                              (load_expr implicit type='[String]' location=main.swift:37:62 range=[main.swift:37:62 - line:37:62]
                                (declref_expr type='@lvalue [String]' location=main.swift:37:62 range=[main.swift:37:62 - line:37:62] decl=main.(file).array@main.swift:11:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:37:68 range=[main.swift:37:68 - line:37:68] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:37:68 range=[main.swift:37:68 - line:37:68] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:37:68 range=[main.swift:37:68 - line:37:68]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:37:68 range=[main.swift:37:68 - line:37:68] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:37:68 range=[main.swift:37:68 - line:37:68]
                              (string_literal_expr type='String' location=main.swift:37:68 range=[main.swift:37:68 - line:37:68] encoding=utf8 value="" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))))
              (default_argument_expr implicit type='String' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1)
              (default_argument_expr implicit type='String' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2))))
        (binary_expr type='Bool' location=main.swift:38:28 range=[main.swift:38:9 - line:38:40] nothrow
          (dot_syntax_call_expr implicit type='(Bool, @autoclosure () throws -> Bool) throws -> Bool' location=main.swift:38:28 range=[main.swift:38:28 - line:38:28] nothrow
            (declref_expr type='(Bool.Type) -> (Bool, @autoclosure () throws -> Bool) throws -> Bool' location=main.swift:38:28 range=[main.swift:38:28 - line:38:28] decl=Swift.(file).Bool extension.&& function_ref=unapplied)
            (type_expr implicit type='Bool.Type' location=main.swift:38:28 range=[main.swift:38:28 - line:38:28] typerepr='Bool'))
          (tuple_expr implicit type='(Bool, @autoclosure () throws -> Bool)' location=main.swift:38:9 range=[main.swift:38:9 - line:38:40]
            (binary_expr type='Bool' location=main.swift:38:14 range=[main.swift:38:9 - line:38:22] nothrow
              (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:38:14 range=[main.swift:38:14 - line:38:14] nothrow
                (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:38:14 range=[main.swift:38:14 - line:38:14] decl=Swift.(file).Int.< function_ref=unapplied)
                (type_expr implicit type='Int.Type' location=main.swift:38:14 range=[main.swift:38:14 - line:38:14] typerepr='Int'))
              (tuple_expr implicit type='(Int, Int)' location=main.swift:38:9 range=[main.swift:38:9 - line:38:22]
                (load_expr implicit type='Int' location=main.swift:38:9 range=[main.swift:38:9 - line:38:9]
                  (declref_expr type='@lvalue Int' location=main.swift:38:9 range=[main.swift:38:9 - line:38:9] decl=main.(file).pass@main.swift:23:5 function_ref=unapplied))
                (member_ref_expr type='Int' location=main.swift:38:22 range=[main.swift:38:16 - line:38:22] decl=Swift.(file).Array extension.count [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
                  (load_expr implicit type='[String]' location=main.swift:38:16 range=[main.swift:38:16 - line:38:16]
                    (declref_expr type='@lvalue [String]' location=main.swift:38:16 range=[main.swift:38:16 - line:38:16] decl=main.(file).array@main.swift:11:5 function_ref=unapplied)))))
            (autoclosure_expr implicit type='() throws -> Bool' location=main.swift:38:31 range=[main.swift:38:31 - line:38:40] discriminator=0 captures=(swaps<direct><noescape>)

              (parameter_list)
              (binary_expr type='Bool' location=main.swift:38:37 range=[main.swift:38:31 - line:38:40] nothrow
                (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:38:37 range=[main.swift:38:37 - line:38:37] nothrow
                  (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:38:37 range=[main.swift:38:37 - line:38:37] decl=Swift.(file).BinaryInteger extension.!= [with (substitution_map generic_signature=<Self where Self : BinaryInteger> (substitution Self -> Int))] function_ref=unapplied)
                  (type_expr implicit type='Int.Type' location=main.swift:38:37 range=[main.swift:38:37 - line:38:37] typerepr='Int'))
                (tuple_expr implicit type='(Int, Int)' location=main.swift:38:31 range=[main.swift:38:31 - line:38:40]
                  (load_expr implicit type='Int' location=main.swift:38:31 range=[main.swift:38:31 - line:38:31]
                    (declref_expr type='@lvalue Int' location=main.swift:38:31 range=[main.swift:38:31 - line:38:31] decl=main.(file).swaps@main.swift:21:5 function_ref=unapplied))
                  (integer_literal_expr type='Int' location=main.swift:38:40 range=[main.swift:38:40 - line:38:40] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))))))))))