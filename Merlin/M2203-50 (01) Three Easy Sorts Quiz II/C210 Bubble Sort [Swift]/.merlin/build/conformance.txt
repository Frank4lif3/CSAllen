(source_file "main.swift"
  (top_level_code_decl range=[main.swift:5:1 - line:5:81]
    (brace_stmt implicit range=[main.swift:5:1 - line:5:81]
      (pattern_binding_decl range=[main.swift:5:1 - line:5:81]
        (pattern_named type='[String]' 'unsortedStrings')
        Original init:
        (array_expr type='[String]' location=main.swift:5:23 range=[main.swift:5:23 - line:5:81] initializer=Swift.(file).Array extension.init(arrayLiteral:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
          (string_literal_expr type='String' location=main.swift:5:24 range=[main.swift:5:24 - line:5:24] encoding=utf8 value="love" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:32 range=[main.swift:5:32 - line:5:32] encoding=utf8 value="perfect" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:43 range=[main.swift:5:43 - line:5:43] encoding=utf8 value="cynical" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:54 range=[main.swift:5:54 - line:5:54] encoding=utf8 value="believe" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:65 range=[main.swift:5:65 - line:5:65] encoding=utf8 value="bridge" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:75 range=[main.swift:5:75 - line:5:75] encoding=utf8 value="seed" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
        Processed init:
        (array_expr type='[String]' location=main.swift:5:23 range=[main.swift:5:23 - line:5:81] initializer=Swift.(file).Array extension.init(arrayLiteral:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
          (string_literal_expr type='String' location=main.swift:5:24 range=[main.swift:5:24 - line:5:24] encoding=utf8 value="love" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:32 range=[main.swift:5:32 - line:5:32] encoding=utf8 value="perfect" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:43 range=[main.swift:5:43 - line:5:43] encoding=utf8 value="cynical" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:54 range=[main.swift:5:54 - line:5:54] encoding=utf8 value="believe" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:65 range=[main.swift:5:65 - line:5:65] encoding=utf8 value="bridge" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
          (string_literal_expr type='String' location=main.swift:5:75 range=[main.swift:5:75 - line:5:75] encoding=utf8 value="seed" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
))
  (var_decl range=[main.swift:5:5 - line:5:5] "unsortedStrings" type='[String]' interface type='[String]' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:14:1 - line:14:14]
    (brace_stmt implicit range=[main.swift:14:1 - line:14:14]
      (pattern_binding_decl range=[main.swift:14:1 - line:14:14]
        (pattern_named type='[String]' 'sorted')
        Original init:
        (unresolved_decl_ref_expr type='<null>' name=unsortedStrings function_ref=unapplied)
        Processed init:
        (declref_expr type='[String]' location=main.swift:14:14 range=[main.swift:14:14 - line:14:14] decl=main.(file).unsortedStrings@main.swift:5:5 function_ref=unapplied))
))
  (var_decl range=[main.swift:14:5 - line:14:5] "sorted" type='[String]' interface type='[String]' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (func_decl range=[main.swift:17:1 - line:26:1] "swap(integers:firstIndex:secondIndex:)" interface type='(inout [String], Int, Int) -> ()' access=internal
    (parameter_list
      (parameter "integers" apiName=integers type='[String]' interface type='[String]' inout)
      (parameter "firstIndex" apiName=firstIndex type='Int' interface type='Int')
      (parameter "secondIndex" apiName=secondIndex type='Int' interface type='Int') range=[main.swift:17:10 - line:17:67])
    (brace_stmt range=[main.swift:17:69 - line:26:1]
      (pattern_binding_decl range=[main.swift:18:5 - line:18:33]
        (pattern_named type='String' 'fI')
        Original init:
        (subscript_expr type='<null>' arg_labels=_:
          (declref_expr type='@lvalue [String]' location=main.swift:18:14 range=[main.swift:18:14 - line:18:14] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied)
          (paren_expr type='(Int)' location=main.swift:18:23 range=[main.swift:18:22 - line:18:33]
            (declref_expr type='Int' location=main.swift:18:23 range=[main.swift:18:23 - line:18:23] decl=main.(file).swap(integers:firstIndex:secondIndex:).firstIndex@main.swift:17:36 function_ref=unapplied)))
        Processed init:
        (load_expr implicit type='String' location=main.swift:18:22 range=[main.swift:18:14 - line:18:33]
          (subscript_expr type='@lvalue String' location=main.swift:18:22 range=[main.swift:18:14 - line:18:33] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
            (inout_expr implicit type='inout Array<String>' location=main.swift:18:14 range=[main.swift:18:14 - line:18:14]
              (declref_expr type='@lvalue [String]' location=main.swift:18:14 range=[main.swift:18:14 - line:18:14] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied))
            (paren_expr type='(Int)' location=main.swift:18:23 range=[main.swift:18:22 - line:18:33]
              (declref_expr type='Int' location=main.swift:18:23 range=[main.swift:18:23 - line:18:23] decl=main.(file).swap(integers:firstIndex:secondIndex:).firstIndex@main.swift:17:36 function_ref=unapplied)))))

      (var_decl range=[main.swift:18:9 - line:18:9] "fI" type='String' interface type='String' access=private let readImpl=stored immutable)

      (pattern_binding_decl range=[main.swift:19:5 - line:19:34]
        (pattern_named type='String' 'sI')
        Original init:
        (subscript_expr type='<null>' arg_labels=_:
          (declref_expr type='@lvalue [String]' location=main.swift:19:14 range=[main.swift:19:14 - line:19:14] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied)
          (paren_expr type='(Int)' location=main.swift:19:23 range=[main.swift:19:22 - line:19:34]
            (declref_expr type='Int' location=main.swift:19:23 range=[main.swift:19:23 - line:19:23] decl=main.(file).swap(integers:firstIndex:secondIndex:).secondIndex@main.swift:17:52 function_ref=unapplied)))
        Processed init:
        (load_expr implicit type='String' location=main.swift:19:22 range=[main.swift:19:14 - line:19:34]
          (subscript_expr type='@lvalue String' location=main.swift:19:22 range=[main.swift:19:14 - line:19:34] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
            (inout_expr implicit type='inout Array<String>' location=main.swift:19:14 range=[main.swift:19:14 - line:19:14]
              (declref_expr type='@lvalue [String]' location=main.swift:19:14 range=[main.swift:19:14 - line:19:14] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied))
            (paren_expr type='(Int)' location=main.swift:19:23 range=[main.swift:19:22 - line:19:34]
              (declref_expr type='Int' location=main.swift:19:23 range=[main.swift:19:23 - line:19:23] decl=main.(file).swap(integers:firstIndex:secondIndex:).secondIndex@main.swift:17:52 function_ref=unapplied)))))

      (var_decl range=[main.swift:19:9 - line:19:9] "sI" type='String' interface type='String' access=private let readImpl=stored immutable)

      (call_expr type='String' location=main.swift:21:14 range=[main.swift:21:5 - line:21:34] nothrow arg_labels=at:
        (dot_syntax_call_expr type='(Int) -> String' location=main.swift:21:14 range=[main.swift:21:5 - line:21:14] nothrow
          (declref_expr type='(inout Array<String>) -> (Int) -> String' location=main.swift:21:14 range=[main.swift:21:14 - line:21:14] decl=Swift.(file).Array extension.remove(at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:21:5 range=[main.swift:21:5 - line:21:5]
            (declref_expr type='@lvalue [String]' location=main.swift:21:5 range=[main.swift:21:5 - line:21:5] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied)))
        (tuple_expr type='(at: Int)' location=main.swift:21:20 range=[main.swift:21:20 - line:21:34] names=at
          (declref_expr type='Int' location=main.swift:21:24 range=[main.swift:21:24 - line:21:24] decl=main.(file).swap(integers:firstIndex:secondIndex:).firstIndex@main.swift:17:36 function_ref=unapplied)))
      (call_expr type='()' location=main.swift:22:14 range=[main.swift:22:5 - line:22:38] nothrow arg_labels=_:at:
        (dot_syntax_call_expr type='(__owned String, Int) -> ()' location=main.swift:22:14 range=[main.swift:22:5 - line:22:14] nothrow
          (declref_expr type='(inout Array<String>) -> (__owned String, Int) -> ()' location=main.swift:22:14 range=[main.swift:22:14 - line:22:14] decl=Swift.(file).Array extension.insert(_:at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:22:5 range=[main.swift:22:5 - line:22:5]
            (declref_expr type='@lvalue [String]' location=main.swift:22:5 range=[main.swift:22:5 - line:22:5] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied)))
        (tuple_expr type='(__owned String, at: Int)' location=main.swift:22:20 range=[main.swift:22:20 - line:22:38] names='',at
          (declref_expr type='String' location=main.swift:22:21 range=[main.swift:22:21 - line:22:21] decl=main.(file).swap(integers:firstIndex:secondIndex:).sI@main.swift:19:9 function_ref=unapplied)
          (declref_expr type='Int' location=main.swift:22:28 range=[main.swift:22:28 - line:22:28] decl=main.(file).swap(integers:firstIndex:secondIndex:).firstIndex@main.swift:17:36 function_ref=unapplied)))
      (call_expr type='String' location=main.swift:23:14 range=[main.swift:23:5 - line:23:35] nothrow arg_labels=at:
        (dot_syntax_call_expr type='(Int) -> String' location=main.swift:23:14 range=[main.swift:23:5 - line:23:14] nothrow
          (declref_expr type='(inout Array<String>) -> (Int) -> String' location=main.swift:23:14 range=[main.swift:23:14 - line:23:14] decl=Swift.(file).Array extension.remove(at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:23:5 range=[main.swift:23:5 - line:23:5]
            (declref_expr type='@lvalue [String]' location=main.swift:23:5 range=[main.swift:23:5 - line:23:5] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied)))
        (tuple_expr type='(at: Int)' location=main.swift:23:20 range=[main.swift:23:20 - line:23:35] names=at
          (declref_expr type='Int' location=main.swift:23:24 range=[main.swift:23:24 - line:23:24] decl=main.(file).swap(integers:firstIndex:secondIndex:).secondIndex@main.swift:17:52 function_ref=unapplied)))
      (call_expr type='()' location=main.swift:24:14 range=[main.swift:24:5 - line:24:39] nothrow arg_labels=_:at:
        (dot_syntax_call_expr type='(__owned String, Int) -> ()' location=main.swift:24:14 range=[main.swift:24:5 - line:24:14] nothrow
          (declref_expr type='(inout Array<String>) -> (__owned String, Int) -> ()' location=main.swift:24:14 range=[main.swift:24:14 - line:24:14] decl=Swift.(file).Array extension.insert(_:at:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] function_ref=single)
          (inout_expr implicit type='inout Array<String>' location=main.swift:24:5 range=[main.swift:24:5 - line:24:5]
            (declref_expr type='@lvalue [String]' location=main.swift:24:5 range=[main.swift:24:5 - line:24:5] decl=main.(file).swap(integers:firstIndex:secondIndex:).integers@main.swift:17:11 function_ref=unapplied)))
        (tuple_expr type='(__owned String, at: Int)' location=main.swift:24:20 range=[main.swift:24:20 - line:24:39] names='',at
          (declref_expr type='String' location=main.swift:24:21 range=[main.swift:24:21 - line:24:21] decl=main.(file).swap(integers:firstIndex:secondIndex:).fI@main.swift:18:9 function_ref=unapplied)
          (declref_expr type='Int' location=main.swift:24:28 range=[main.swift:24:28 - line:24:28] decl=main.(file).swap(integers:firstIndex:secondIndex:).secondIndex@main.swift:17:52 function_ref=unapplied)))))
  (top_level_code_decl range=[main.swift:28:1 - line:28:14]
    (brace_stmt implicit range=[main.swift:28:1 - line:28:14]
      (pattern_binding_decl range=[main.swift:28:1 - line:28:14]
        (pattern_named type='Int' 'passes')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:28:14 range=[main.swift:28:14 - line:28:14] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:28:14 range=[main.swift:28:14 - line:28:14] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:28:5 - line:28:5] "passes" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:29:1 - line:29:13]
    (brace_stmt implicit range=[main.swift:29:1 - line:29:13]
      (pattern_binding_decl range=[main.swift:29:1 - line:29:13]
        (pattern_named type='Int' 'swaps')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:29:13 range=[main.swift:29:13 - line:29:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:29:13 range=[main.swift:29:13 - line:29:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:29:5 - line:29:5] "swaps" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:30:1 - line:30:14]
    (brace_stmt implicit range=[main.swift:30:1 - line:30:14]
      (pattern_binding_decl range=[main.swift:30:1 - line:30:14]
        (pattern_named type='Int' 'tSwaps')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:30:14 range=[main.swift:30:14 - line:30:14] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:30:14 range=[main.swift:30:14 - line:30:14] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:30:5 - line:30:5] "tSwaps" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:31:1 - line:31:14]
    (brace_stmt implicit range=[main.swift:31:1 - line:31:14]
      (pattern_binding_decl range=[main.swift:31:1 - line:31:14]
        (pattern_named type='Int' 'totalp')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:31:14 range=[main.swift:31:14 - line:31:14] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:31:14 range=[main.swift:31:14 - line:31:14] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:31:5 - line:31:5] "totalp" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:32:1 - line:32:16]
    (brace_stmt implicit range=[main.swift:32:1 - line:32:16]
      (pattern_binding_decl range=[main.swift:32:1 - line:32:16]
        (pattern_named type='Bool' 'lastTime')
        Original init:
        (boolean_literal_expr type='Bool' location=main.swift:32:16 range=[main.swift:32:16 - line:32:16] value=false builtin_initializer=Swift.(file).Bool extension.init(_builtinBooleanLiteral:) initializer=**NULL**)
        Processed init:
        (boolean_literal_expr type='Bool' location=main.swift:32:16 range=[main.swift:32:16 - line:32:16] value=false builtin_initializer=Swift.(file).Bool extension.init(_builtinBooleanLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:32:5 - line:32:5] "lastTime" type='Bool' interface type='Bool' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:33:1 - line:33:69]
    (brace_stmt range=[main.swift:33:1 - line:33:69]
      (call_expr type='()' location=main.swift:33:1 range=[main.swift:33:1 - line:33:69] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=main.swift:33:1 range=[main.swift:33:1 - line:33:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:33:6 range=[main.swift:33:6 - line:33:69] names='',separator,terminator
          (vararg_expansion_expr implicit type='[Any]' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7]
            (array_expr implicit type='[Any]' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7] initializer=**NULL**
              (erasure_expr implicit type='Any' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7]
                (interpolated_string_literal_expr type='String' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7] trailing_quote_loc=main.swift:33:68 literal_capacity=25 interpolation_count=4 builder_init=Swift.(file).DefaultStringInterpolation.init(literalCapacity:interpolationCount:) result_init=Swift.(file).String extension.init(stringInterpolation:)
                  (tap_expr implicit type='DefaultStringInterpolation' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7] var=main.(file).top-level code.$interpolation
                    (opaque_value_expr implicit type='DefaultStringInterpolation' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7] @ 0x8abb1a0)
                    (brace_stmt implicit range=[main.swift:33:7 - line:33:7]
                      (var_decl implicit "$interpolation" type='DefaultStringInterpolation' interface type='DefaultStringInterpolation' access=fileprivate non_pattern_init readImpl=stored writeImpl=stored readWriteImpl=stored)

                      (call_expr implicit type='()' location=main.swift:33:8 range=[main.swift:33:8 - line:33:7] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:33:8 range=[main.swift:33:8 - line:33:8] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:8 range=[main.swift:33:8 - line:33:8]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:8 range=[main.swift:33:8 - line:33:8] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7]
                          (string_literal_expr type='String' location=main.swift:33:7 range=[main.swift:33:7 - line:33:7] encoding=utf8 value="Pass: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:33:15 range=[main.swift:33:15 - line:33:22] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:33:15 range=[main.swift:33:15 - line:33:15] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:33:15 range=[main.swift:33:15 - line:33:15] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:15 range=[main.swift:33:15 - line:33:15]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:15 range=[main.swift:33:15 - line:33:15] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='(Int)' location=main.swift:33:16 range=[main.swift:33:15 - line:33:22]
                          (load_expr implicit type='Int' location=main.swift:33:16 range=[main.swift:33:16 - line:33:16]
                            (declref_expr type='@lvalue Int' location=main.swift:33:16 range=[main.swift:33:16 - line:33:16] decl=main.(file).passes@main.swift:28:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:33:23 range=[main.swift:33:23 - line:33:23] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:33:23 range=[main.swift:33:23 - line:33:23] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:23 range=[main.swift:33:23 - line:33:23]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:23 range=[main.swift:33:23 - line:33:23] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:33:23 range=[main.swift:33:23 - line:33:23]
                          (string_literal_expr type='String' location=main.swift:33:23 range=[main.swift:33:23 - line:33:23] encoding=utf8 value=", Swaps: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:33:33 range=[main.swift:33:33 - line:33:39] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:33:33 range=[main.swift:33:33 - line:33:33] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:33:33 range=[main.swift:33:33 - line:33:33] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:33 range=[main.swift:33:33 - line:33:33]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:33 range=[main.swift:33:33 - line:33:33] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='(Int)' location=main.swift:33:34 range=[main.swift:33:33 - line:33:39]
                          (load_expr implicit type='Int' location=main.swift:33:34 range=[main.swift:33:34 - line:33:34]
                            (declref_expr type='@lvalue Int' location=main.swift:33:34 range=[main.swift:33:34 - line:33:34] decl=main.(file).swaps@main.swift:29:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:33:40 range=[main.swift:33:40 - line:33:40] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:33:40 range=[main.swift:33:40 - line:33:40] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:40 range=[main.swift:33:40 - line:33:40]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:40 range=[main.swift:33:40 - line:33:40] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:33:40 range=[main.swift:33:40 - line:33:40]
                          (string_literal_expr type='String' location=main.swift:33:40 range=[main.swift:33:40 - line:33:40] encoding=utf8 value="/" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:33:42 range=[main.swift:33:42 - line:33:49] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:33:42 range=[main.swift:33:42 - line:33:42] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:33:42 range=[main.swift:33:42 - line:33:42] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:42 range=[main.swift:33:42 - line:33:42]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:42 range=[main.swift:33:42 - line:33:42] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='(Int)' location=main.swift:33:43 range=[main.swift:33:42 - line:33:49]
                          (load_expr implicit type='Int' location=main.swift:33:43 range=[main.swift:33:43 - line:33:43]
                            (declref_expr type='@lvalue Int' location=main.swift:33:43 range=[main.swift:33:43 - line:33:43] decl=main.(file).tSwaps@main.swift:30:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:33:50 range=[main.swift:33:50 - line:33:50] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:33:50 range=[main.swift:33:50 - line:33:50] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:50 range=[main.swift:33:50 - line:33:50]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:50 range=[main.swift:33:50 - line:33:50] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:33:50 range=[main.swift:33:50 - line:33:50]
                          (string_literal_expr type='String' location=main.swift:33:50 range=[main.swift:33:50 - line:33:50] encoding=utf8 value=", Array: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                      (call_expr type='()' location=main.swift:33:60 range=[main.swift:33:60 - line:33:67] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='([String]) -> ()' location=main.swift:33:60 range=[main.swift:33:60 - line:33:60] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> ([String]) -> ()' location=main.swift:33:60 range=[main.swift:33:60 - line:33:60] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> [String]))] function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:60 range=[main.swift:33:60 - line:33:60]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:60 range=[main.swift:33:60 - line:33:60] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr type='([String])' location=main.swift:33:61 range=[main.swift:33:60 - line:33:67]
                          (load_expr implicit type='[String]' location=main.swift:33:61 range=[main.swift:33:61 - line:33:61]
                            (declref_expr type='@lvalue [String]' location=main.swift:33:61 range=[main.swift:33:61 - line:33:61] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied))))
                      (call_expr implicit type='()' location=main.swift:33:68 range=[main.swift:33:68 - line:33:68] nothrow arg_labels=_:
                        (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:33:68 range=[main.swift:33:68 - line:33:68] nothrow
                          (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                          (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:33:68 range=[main.swift:33:68 - line:33:68]
                            (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:33:68 range=[main.swift:33:68 - line:33:68] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                        (paren_expr implicit type='(String)' location=main.swift:33:68 range=[main.swift:33:68 - line:33:68]
                          (string_literal_expr type='String' location=main.swift:33:68 range=[main.swift:33:68 - line:33:68] encoding=utf8 value="" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))))
          (default_argument_expr implicit type='String' location=main.swift:33:6 range=[main.swift:33:6 - line:33:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1)
          (default_argument_expr implicit type='String' location=main.swift:33:6 range=[main.swift:33:6 - line:33:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2)))))
  (top_level_code_decl range=[main.swift:35:1 - line:50:45]
    (brace_stmt range=[main.swift:35:1 - line:50:45]
      (repeat_while_stmt range=[main.swift:35:1 - line:50:45]
        (brace_stmt range=[main.swift:35:8 - line:50:1]
          (binary_expr type='()' location=main.swift:36:12 range=[main.swift:36:5 - line:36:15] nothrow
            (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:36:12 range=[main.swift:36:12 - line:36:12] nothrow
              (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:36:12 range=[main.swift:36:12 - line:36:12] decl=Swift.(file).Int.+= function_ref=unapplied)
              (type_expr implicit type='Int.Type' location=main.swift:36:12 range=[main.swift:36:12 - line:36:12] typerepr='Int'))
            (tuple_expr implicit type='(inout Int, Int)' location=main.swift:36:5 range=[main.swift:36:5 - line:36:15]
              (inout_expr implicit type='inout Int' location=main.swift:36:5 range=[main.swift:36:5 - line:36:5]
                (declref_expr type='@lvalue Int' location=main.swift:36:5 range=[main.swift:36:5 - line:36:5] decl=main.(file).totalp@main.swift:31:5 function_ref=unapplied))
              (integer_literal_expr type='Int' location=main.swift:36:15 range=[main.swift:36:15 - line:36:15] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
          (for_each_stmt range=[main.swift:37:5 - line:43:5] make_generator=Swift.(file).Collection extension.makeIterator() [with (substitution_map generic_signature=<Self where Self : Collection, Self.Iterator == IndexingIterator<Self>> (substitution Self -> Range<Int>))] next=Swift.(file).IndexingIterator extension.next() [with (substitution_map generic_signature=<Elements where Elements : Collection> (substitution Elements -> Range<Int>))]
            (pattern_named type='Int' 'x')
            (pattern_named type='Int' 'x')
            (binary_expr type='Range<Int>' location=main.swift:37:16 range=[main.swift:37:14 - line:37:35] nothrow
              (dot_syntax_call_expr implicit type='(Int, Int) -> Range<Int>' location=main.swift:37:16 range=[main.swift:37:16 - line:37:16] nothrow
                (declref_expr type='(Int.Type) -> (Int, Int) -> Range<Int>' location=main.swift:37:16 range=[main.swift:37:16 - line:37:16] decl=Swift.(file).Comparable extension...< [with (substitution_map generic_signature=<Self where Self : Comparable> (substitution Self -> Int))] function_ref=unapplied)
                (type_expr implicit type='Int.Type' location=main.swift:37:16 range=[main.swift:37:16 - line:37:16] typerepr='Int'))
              (tuple_expr implicit type='(Int, Int)' location=main.swift:37:14 range=[main.swift:37:14 - line:37:35]
                (integer_literal_expr type='Int' location=main.swift:37:14 range=[main.swift:37:14 - line:37:14] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
                (binary_expr type='Int' location=main.swift:37:33 range=[main.swift:37:20 - line:37:35] nothrow
                  (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:37:33 range=[main.swift:37:33 - line:37:33] nothrow
                    (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:37:33 range=[main.swift:37:33 - line:37:33] decl=Swift.(file).Int extension.- function_ref=unapplied)
                    (type_expr implicit type='Int.Type' location=main.swift:37:33 range=[main.swift:37:33 - line:37:33] typerepr='Int'))
                  (tuple_expr implicit type='(Int, Int)' location=main.swift:37:20 range=[main.swift:37:20 - line:37:35]
                    (member_ref_expr type='Int' location=main.swift:37:27 range=[main.swift:37:20 - line:37:27] decl=Swift.(file).Array extension.count [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
                      (load_expr implicit type='[String]' location=main.swift:37:20 range=[main.swift:37:20 - line:37:20]
                        (declref_expr type='@lvalue [String]' location=main.swift:37:20 range=[main.swift:37:20 - line:37:20] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied)))
                    (integer_literal_expr type='Int' location=main.swift:37:35 range=[main.swift:37:35 - line:37:35] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))
            (var_decl implicit range=[main.swift:37:11 - line:37:11] "$x$generator" type='Range<Int>.Iterator' interface type='Range<Int>.Iterator' access=fileprivate readImpl=stored writeImpl=stored readWriteImpl=stored)

            (declref_expr implicit type='@lvalue Range<Int>.Iterator' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] decl=main.(file).top-level code.$x$generator@main.swift:37:11 function_ref=unapplied)
            (brace_stmt range=[main.swift:37:37 - line:43:5]
              (if_stmt range=[main.swift:38:9 - line:42:9]
                (binary_expr type='Bool' location=main.swift:38:22 range=[main.swift:38:12 - line:38:34] nothrow
                  (dot_syntax_call_expr implicit type='(String, String) -> Bool' location=main.swift:38:22 range=[main.swift:38:22 - line:38:22] nothrow
                    (declref_expr implicit type='(String.Type) -> (String, String) -> Bool' location=main.swift:38:22 range=[main.swift:38:22 - line:38:22] decl=Swift.(file).Comparable extension.> [with (substitution_map generic_signature=<Self where Self : Comparable> (substitution Self -> String))] function_ref=double)
                    (type_expr implicit type='String.Type' location=main.swift:38:22 range=[main.swift:38:22 - line:38:22] typerepr='String'))
                  (tuple_expr implicit type='(String, String)' location=main.swift:38:12 range=[main.swift:38:12 - line:38:34]
                    (load_expr implicit type='String' location=main.swift:38:18 range=[main.swift:38:12 - line:38:20]
                      (subscript_expr type='@lvalue String' location=main.swift:38:18 range=[main.swift:38:12 - line:38:20] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
                        (inout_expr implicit type='inout Array<String>' location=main.swift:38:12 range=[main.swift:38:12 - line:38:12]
                          (declref_expr type='@lvalue [String]' location=main.swift:38:12 range=[main.swift:38:12 - line:38:12] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied))
                        (paren_expr type='(Int)' location=main.swift:38:19 range=[main.swift:38:18 - line:38:20]
                          (declref_expr type='Int' location=main.swift:38:19 range=[main.swift:38:19 - line:38:19] decl=main.(file).top-level code.x@main.swift:37:9 function_ref=unapplied))))
                    (load_expr implicit type='String' location=main.swift:38:30 range=[main.swift:38:24 - line:38:34]
                      (subscript_expr type='@lvalue String' location=main.swift:38:30 range=[main.swift:38:24 - line:38:34] decl=Swift.(file).Array extension.subscript(_:) [with (substitution_map generic_signature=<Element> (substitution Element -> String))] arg_labels=_:
                        (inout_expr implicit type='inout Array<String>' location=main.swift:38:24 range=[main.swift:38:24 - line:38:24]
                          (declref_expr type='@lvalue [String]' location=main.swift:38:24 range=[main.swift:38:24 - line:38:24] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied))
                        (paren_expr type='(Int)' location=main.swift:38:32 range=[main.swift:38:30 - line:38:34]
                          (binary_expr type='Int' location=main.swift:38:32 range=[main.swift:38:31 - line:38:33] nothrow
                            (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:38:32 range=[main.swift:38:32 - line:38:32] nothrow
                              (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:38:32 range=[main.swift:38:32 - line:38:32] decl=Swift.(file).Int extension.+ function_ref=unapplied)
                              (type_expr implicit type='Int.Type' location=main.swift:38:32 range=[main.swift:38:32 - line:38:32] typerepr='Int'))
                            (tuple_expr implicit type='(Int, Int)' location=main.swift:38:31 range=[main.swift:38:31 - line:38:33]
                              (declref_expr type='Int' location=main.swift:38:31 range=[main.swift:38:31 - line:38:31] decl=main.(file).top-level code.x@main.swift:37:9 function_ref=unapplied)
                              (integer_literal_expr type='Int' location=main.swift:38:33 range=[main.swift:38:33 - line:38:33] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))))))))
                (brace_stmt range=[main.swift:38:36 - line:42:9]
                  (binary_expr type='()' location=main.swift:39:19 range=[main.swift:39:13 - line:39:22] nothrow
                    (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:39:19 range=[main.swift:39:19 - line:39:19] nothrow
                      (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:39:19 range=[main.swift:39:19 - line:39:19] decl=Swift.(file).Int.+= function_ref=unapplied)
                      (type_expr implicit type='Int.Type' location=main.swift:39:19 range=[main.swift:39:19 - line:39:19] typerepr='Int'))
                    (tuple_expr implicit type='(inout Int, Int)' location=main.swift:39:13 range=[main.swift:39:13 - line:39:22]
                      (inout_expr implicit type='inout Int' location=main.swift:39:13 range=[main.swift:39:13 - line:39:13]
                        (declref_expr type='@lvalue Int' location=main.swift:39:13 range=[main.swift:39:13 - line:39:13] decl=main.(file).swaps@main.swift:29:5 function_ref=unapplied))
                      (integer_literal_expr type='Int' location=main.swift:39:22 range=[main.swift:39:22 - line:39:22] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                  (binary_expr type='()' location=main.swift:40:20 range=[main.swift:40:13 - line:40:23] nothrow
                    (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:40:20 range=[main.swift:40:20 - line:40:20] nothrow
                      (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:40:20 range=[main.swift:40:20 - line:40:20] decl=Swift.(file).Int.+= function_ref=unapplied)
                      (type_expr implicit type='Int.Type' location=main.swift:40:20 range=[main.swift:40:20 - line:40:20] typerepr='Int'))
                    (tuple_expr implicit type='(inout Int, Int)' location=main.swift:40:13 range=[main.swift:40:13 - line:40:23]
                      (inout_expr implicit type='inout Int' location=main.swift:40:13 range=[main.swift:40:13 - line:40:13]
                        (declref_expr type='@lvalue Int' location=main.swift:40:13 range=[main.swift:40:13 - line:40:13] decl=main.(file).tSwaps@main.swift:30:5 function_ref=unapplied))
                      (integer_literal_expr type='Int' location=main.swift:40:23 range=[main.swift:40:23 - line:40:23] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                  (call_expr type='()' location=main.swift:41:13 range=[main.swift:41:13 - line:41:63] nothrow arg_labels=integers:firstIndex:secondIndex:
                    (declref_expr type='(inout [String], Int, Int) -> ()' location=main.swift:41:13 range=[main.swift:41:13 - line:41:13] decl=main.(file).swap(integers:firstIndex:secondIndex:)@main.swift:17:6 function_ref=single)
                    (tuple_expr type='(integers: inout [String], firstIndex: Int, secondIndex: Int)' location=main.swift:41:17 range=[main.swift:41:17 - line:41:63] names=integers,firstIndex,secondIndex
                      (inout_expr type='inout [String]' location=main.swift:41:27 range=[main.swift:41:27 - line:41:28]
                        (declref_expr type='@lvalue [String]' location=main.swift:41:28 range=[main.swift:41:28 - line:41:28] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied))
                      (declref_expr type='Int' location=main.swift:41:46 range=[main.swift:41:46 - line:41:46] decl=main.(file).top-level code.x@main.swift:37:9 function_ref=unapplied)
                      (binary_expr type='Int' location=main.swift:41:61 range=[main.swift:41:60 - line:41:62] nothrow
                        (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:41:61 range=[main.swift:41:61 - line:41:61] nothrow
                          (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:41:61 range=[main.swift:41:61 - line:41:61] decl=Swift.(file).Int extension.+ function_ref=unapplied)
                          (type_expr implicit type='Int.Type' location=main.swift:41:61 range=[main.swift:41:61 - line:41:61] typerepr='Int'))
                        (tuple_expr implicit type='(Int, Int)' location=main.swift:41:60 range=[main.swift:41:60 - line:41:62]
                          (declref_expr type='Int' location=main.swift:41:60 range=[main.swift:41:60 - line:41:60] decl=main.(file).top-level code.x@main.swift:37:9 function_ref=unapplied)
                          (integer_literal_expr type='Int' location=main.swift:41:62 range=[main.swift:41:62 - line:41:62] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))))))
          (binary_expr type='()' location=main.swift:44:12 range=[main.swift:44:5 - line:44:15] nothrow
            (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:44:12 range=[main.swift:44:12 - line:44:12] nothrow
              (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:44:12 range=[main.swift:44:12 - line:44:12] decl=Swift.(file).Int.+= function_ref=unapplied)
              (type_expr implicit type='Int.Type' location=main.swift:44:12 range=[main.swift:44:12 - line:44:12] typerepr='Int'))
            (tuple_expr implicit type='(inout Int, Int)' location=main.swift:44:5 range=[main.swift:44:5 - line:44:15]
              (inout_expr implicit type='inout Int' location=main.swift:44:5 range=[main.swift:44:5 - line:44:5]
                (declref_expr type='@lvalue Int' location=main.swift:44:5 range=[main.swift:44:5 - line:44:5] decl=main.(file).passes@main.swift:28:5 function_ref=unapplied))
              (integer_literal_expr type='Int' location=main.swift:44:15 range=[main.swift:44:15 - line:44:15] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
          (call_expr type='()' location=main.swift:45:5 range=[main.swift:45:5 - line:45:73] nothrow arg_labels=_:
            (declref_expr type='(Any..., String, String) -> ()' location=main.swift:45:5 range=[main.swift:45:5 - line:45:5] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (tuple_expr implicit type='(Any..., separator: String, terminator: String)' location=main.swift:45:10 range=[main.swift:45:10 - line:45:73] names='',separator,terminator
              (vararg_expansion_expr implicit type='[Any]' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11]
                (array_expr implicit type='[Any]' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11] initializer=**NULL**
                  (erasure_expr implicit type='Any' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11]
                    (interpolated_string_literal_expr type='String' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11] trailing_quote_loc=main.swift:45:72 literal_capacity=25 interpolation_count=4 builder_init=Swift.(file).DefaultStringInterpolation.init(literalCapacity:interpolationCount:) result_init=Swift.(file).String extension.init(stringInterpolation:)
                      (tap_expr implicit type='DefaultStringInterpolation' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11] var=main.(file).top-level code.$interpolation
                        (opaque_value_expr implicit type='DefaultStringInterpolation' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11] @ 0x94c2200)
                        (brace_stmt implicit range=[main.swift:45:11 - line:45:11]
                          (var_decl implicit "$interpolation" type='DefaultStringInterpolation' interface type='DefaultStringInterpolation' access=fileprivate non_pattern_init readImpl=stored writeImpl=stored readWriteImpl=stored)

                          (call_expr implicit type='()' location=main.swift:45:12 range=[main.swift:45:12 - line:45:11] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:45:12 range=[main.swift:45:12 - line:45:12] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:12 range=[main.swift:45:12 - line:45:12]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:12 range=[main.swift:45:12 - line:45:12] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11]
                              (string_literal_expr type='String' location=main.swift:45:11 range=[main.swift:45:11 - line:45:11] encoding=utf8 value="Pass: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:45:19 range=[main.swift:45:19 - line:45:26] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:45:19 range=[main.swift:45:19 - line:45:19] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:45:19 range=[main.swift:45:19 - line:45:19] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:19 range=[main.swift:45:19 - line:45:19]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:19 range=[main.swift:45:19 - line:45:19] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='(Int)' location=main.swift:45:20 range=[main.swift:45:19 - line:45:26]
                              (load_expr implicit type='Int' location=main.swift:45:20 range=[main.swift:45:20 - line:45:20]
                                (declref_expr type='@lvalue Int' location=main.swift:45:20 range=[main.swift:45:20 - line:45:20] decl=main.(file).passes@main.swift:28:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:45:27 range=[main.swift:45:27 - line:45:27] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:45:27 range=[main.swift:45:27 - line:45:27] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:27 range=[main.swift:45:27 - line:45:27]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:27 range=[main.swift:45:27 - line:45:27] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:45:27 range=[main.swift:45:27 - line:45:27]
                              (string_literal_expr type='String' location=main.swift:45:27 range=[main.swift:45:27 - line:45:27] encoding=utf8 value=", Swaps: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:45:37 range=[main.swift:45:37 - line:45:43] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:45:37 range=[main.swift:45:37 - line:45:37] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:45:37 range=[main.swift:45:37 - line:45:37] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:37 range=[main.swift:45:37 - line:45:37]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:37 range=[main.swift:45:37 - line:45:37] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='(Int)' location=main.swift:45:38 range=[main.swift:45:37 - line:45:43]
                              (load_expr implicit type='Int' location=main.swift:45:38 range=[main.swift:45:38 - line:45:38]
                                (declref_expr type='@lvalue Int' location=main.swift:45:38 range=[main.swift:45:38 - line:45:38] decl=main.(file).swaps@main.swift:29:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:45:44 range=[main.swift:45:44 - line:45:44] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:45:44 range=[main.swift:45:44 - line:45:44] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:44 range=[main.swift:45:44 - line:45:44]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:44 range=[main.swift:45:44 - line:45:44] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:45:44 range=[main.swift:45:44 - line:45:44]
                              (string_literal_expr type='String' location=main.swift:45:44 range=[main.swift:45:44 - line:45:44] encoding=utf8 value="/" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:45:46 range=[main.swift:45:46 - line:45:53] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:45:46 range=[main.swift:45:46 - line:45:46] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:45:46 range=[main.swift:45:46 - line:45:46] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:46 range=[main.swift:45:46 - line:45:46]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:46 range=[main.swift:45:46 - line:45:46] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='(Int)' location=main.swift:45:47 range=[main.swift:45:46 - line:45:53]
                              (load_expr implicit type='Int' location=main.swift:45:47 range=[main.swift:45:47 - line:45:47]
                                (declref_expr type='@lvalue Int' location=main.swift:45:47 range=[main.swift:45:47 - line:45:47] decl=main.(file).tSwaps@main.swift:30:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:45:54 range=[main.swift:45:54 - line:45:54] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:45:54 range=[main.swift:45:54 - line:45:54] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:54 range=[main.swift:45:54 - line:45:54]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:54 range=[main.swift:45:54 - line:45:54] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:45:54 range=[main.swift:45:54 - line:45:54]
                              (string_literal_expr type='String' location=main.swift:45:54 range=[main.swift:45:54 - line:45:54] encoding=utf8 value=", Array: " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))
                          (call_expr type='()' location=main.swift:45:64 range=[main.swift:45:64 - line:45:71] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='([String]) -> ()' location=main.swift:45:64 range=[main.swift:45:64 - line:45:64] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> ([String]) -> ()' location=main.swift:45:64 range=[main.swift:45:64 - line:45:64] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> [String]))] function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:64 range=[main.swift:45:64 - line:45:64]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:64 range=[main.swift:45:64 - line:45:64] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr type='([String])' location=main.swift:45:65 range=[main.swift:45:64 - line:45:71]
                              (load_expr implicit type='[String]' location=main.swift:45:65 range=[main.swift:45:65 - line:45:65]
                                (declref_expr type='@lvalue [String]' location=main.swift:45:65 range=[main.swift:45:65 - line:45:65] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied))))
                          (call_expr implicit type='()' location=main.swift:45:72 range=[main.swift:45:72 - line:45:72] nothrow arg_labels=_:
                            (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:45:72 range=[main.swift:45:72 - line:45:72] nothrow
                              (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=single)
                              (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:45:72 range=[main.swift:45:72 - line:45:72]
                                (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:45:72 range=[main.swift:45:72 - line:45:72] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                            (paren_expr implicit type='(String)' location=main.swift:45:72 range=[main.swift:45:72 - line:45:72]
                              (string_literal_expr type='String' location=main.swift:45:72 range=[main.swift:45:72 - line:45:72] encoding=utf8 value="" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))))
              (default_argument_expr implicit type='String' location=main.swift:45:10 range=[main.swift:45:10 - line:45:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1)
              (default_argument_expr implicit type='String' location=main.swift:45:10 range=[main.swift:45:10 - line:45:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2)))
          (if_stmt range=[main.swift:46:5 - line:48:5]
            (binary_expr type='Bool' location=main.swift:46:14 range=[main.swift:46:8 - line:46:17] nothrow
              (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:46:14 range=[main.swift:46:14 - line:46:14] nothrow
                (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:46:14 range=[main.swift:46:14 - line:46:14] decl=Swift.(file).Int.== function_ref=unapplied)
                (type_expr implicit type='Int.Type' location=main.swift:46:14 range=[main.swift:46:14 - line:46:14] typerepr='Int'))
              (tuple_expr implicit type='(Int, Int)' location=main.swift:46:8 range=[main.swift:46:8 - line:46:17]
                (load_expr implicit type='Int' location=main.swift:46:8 range=[main.swift:46:8 - line:46:8]
                  (declref_expr type='@lvalue Int' location=main.swift:46:8 range=[main.swift:46:8 - line:46:8] decl=main.(file).swaps@main.swift:29:5 function_ref=unapplied))
                (integer_literal_expr type='Int' location=main.swift:46:17 range=[main.swift:46:17 - line:46:17] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
            (brace_stmt range=[main.swift:46:19 - line:48:5]
              (assign_expr type='()' location=main.swift:47:18 range=[main.swift:47:9 - line:47:20]
                (declref_expr type='@lvalue Bool' location=main.swift:47:9 range=[main.swift:47:9 - line:47:9] decl=main.(file).lastTime@main.swift:32:5 function_ref=unapplied)
                (boolean_literal_expr type='Bool' location=main.swift:47:20 range=[main.swift:47:20 - line:47:20] value=true builtin_initializer=Swift.(file).Bool extension.init(_builtinBooleanLiteral:) initializer=**NULL**))))
          (assign_expr type='()' location=main.swift:49:11 range=[main.swift:49:5 - line:49:13]
            (declref_expr type='@lvalue Int' location=main.swift:49:5 range=[main.swift:49:5 - line:49:5] decl=main.(file).swaps@main.swift:29:5 function_ref=unapplied)
            (integer_literal_expr type='Int' location=main.swift:49:13 range=[main.swift:49:13 - line:49:13] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
        (binary_expr type='Bool' location=main.swift:50:26 range=[main.swift:50:8 - line:50:45] nothrow
          (dot_syntax_call_expr implicit type='(Bool, @autoclosure () throws -> Bool) throws -> Bool' location=main.swift:50:26 range=[main.swift:50:26 - line:50:26] nothrow
            (declref_expr type='(Bool.Type) -> (Bool, @autoclosure () throws -> Bool) throws -> Bool' location=main.swift:50:26 range=[main.swift:50:26 - line:50:26] decl=Swift.(file).Bool extension.&& function_ref=unapplied)
            (type_expr implicit type='Bool.Type' location=main.swift:50:26 range=[main.swift:50:26 - line:50:26] typerepr='Bool'))
          (tuple_expr implicit type='(Bool, @autoclosure () throws -> Bool)' location=main.swift:50:8 range=[main.swift:50:8 - line:50:45]
            (binary_expr type='Bool' location=main.swift:50:17 range=[main.swift:50:8 - line:50:20] nothrow
              (dot_syntax_call_expr implicit type='(Bool, Bool) -> Bool' location=main.swift:50:17 range=[main.swift:50:17 - line:50:17] nothrow
                (declref_expr type='(Bool.Type) -> (Bool, Bool) -> Bool' location=main.swift:50:17 range=[main.swift:50:17 - line:50:17] decl=Swift.(file).Bool extension.== function_ref=unapplied)
                (type_expr implicit type='Bool.Type' location=main.swift:50:17 range=[main.swift:50:17 - line:50:17] typerepr='Bool'))
              (tuple_expr implicit type='(Bool, Bool)' location=main.swift:50:8 range=[main.swift:50:8 - line:50:20]
                (load_expr implicit type='Bool' location=main.swift:50:8 range=[main.swift:50:8 - line:50:8]
                  (declref_expr type='@lvalue Bool' location=main.swift:50:8 range=[main.swift:50:8 - line:50:8] decl=main.(file).lastTime@main.swift:32:5 function_ref=unapplied))
                (boolean_literal_expr type='Bool' location=main.swift:50:20 range=[main.swift:50:20 - line:50:20] value=false builtin_initializer=Swift.(file).Bool extension.init(_builtinBooleanLiteral:) initializer=**NULL**)))
            (autoclosure_expr implicit type='() throws -> Bool' location=main.swift:50:29 range=[main.swift:50:29 - line:50:45] discriminator=0 captures=(totalp<direct><noescape>, sorted<direct><noescape>)

              (parameter_list)
              (binary_expr type='Bool' location=main.swift:50:36 range=[main.swift:50:29 - line:50:45] nothrow
                (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:50:36 range=[main.swift:50:36 - line:50:36] nothrow
                  (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:50:36 range=[main.swift:50:36 - line:50:36] decl=Swift.(file).Int.< function_ref=unapplied)
                  (type_expr implicit type='Int.Type' location=main.swift:50:36 range=[main.swift:50:36 - line:50:36] typerepr='Int'))
                (tuple_expr implicit type='(Int, Int)' location=main.swift:50:29 range=[main.swift:50:29 - line:50:45]
                  (load_expr implicit type='Int' location=main.swift:50:29 range=[main.swift:50:29 - line:50:29]
                    (declref_expr type='@lvalue Int' location=main.swift:50:29 range=[main.swift:50:29 - line:50:29] decl=main.(file).totalp@main.swift:31:5 function_ref=unapplied))
                  (member_ref_expr type='Int' location=main.swift:50:45 range=[main.swift:50:38 - line:50:45] decl=Swift.(file).Array extension.count [with (substitution_map generic_signature=<Element> (substitution Element -> String))]
                    (load_expr implicit type='[String]' location=main.swift:50:38 range=[main.swift:50:38 - line:50:38]
                      (declref_expr type='@lvalue [String]' location=main.swift:50:38 range=[main.swift:50:38 - line:50:38] decl=main.(file).sorted@main.swift:14:5 function_ref=unapplied))))))))))))